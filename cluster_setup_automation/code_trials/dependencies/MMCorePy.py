# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_MMCorePy')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_MMCorePy')
    _MMCorePy = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_MMCorePy', [dirname(__file__)])
        except ImportError:
            import _MMCorePy
            return _MMCorePy
        try:
            _mod = imp.load_module('_MMCorePy', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _MMCorePy = swig_import_helper()
    del swig_import_helper
else:
    import _MMCorePy
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MMCorePy.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        """
        value(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _MMCorePy.SwigPyIterator_value(self)


    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        incr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _MMCorePy.SwigPyIterator_incr(self, n)


    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator

        Parameters
        ----------
        n: size_t

        decr(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _MMCorePy.SwigPyIterator_decr(self, n)


    def distance(self, x):
        """
        distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _MMCorePy.SwigPyIterator_distance(self, x)


    def equal(self, x):
        """
        equal(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _MMCorePy.SwigPyIterator_equal(self, x)


    def copy(self):
        """
        copy(SwigPyIterator self) -> SwigPyIterator

        Parameters
        ----------
        self: swig::SwigPyIterator const *

        """
        return _MMCorePy.SwigPyIterator_copy(self)


    def next(self):
        """
        next(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _MMCorePy.SwigPyIterator_next(self)


    def __next__(self):
        """
        __next__(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _MMCorePy.SwigPyIterator___next__(self)


    def previous(self):
        """
        previous(SwigPyIterator self) -> PyObject *

        Parameters
        ----------
        self: swig::SwigPyIterator *

        """
        return _MMCorePy.SwigPyIterator_previous(self)


    def advance(self, n):
        """
        advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _MMCorePy.SwigPyIterator_advance(self, n)


    def __eq__(self, x):
        """
        __eq__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _MMCorePy.SwigPyIterator___eq__(self, x)


    def __ne__(self, x):
        """
        __ne__(SwigPyIterator self, SwigPyIterator x) -> bool

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _MMCorePy.SwigPyIterator___ne__(self, x)


    def __iadd__(self, n):
        """
        __iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _MMCorePy.SwigPyIterator___iadd__(self, n)


    def __isub__(self, n):
        """
        __isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _MMCorePy.SwigPyIterator___isub__(self, n)


    def __add__(self, n):
        """
        __add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        """
        return _MMCorePy.SwigPyIterator___add__(self, n)


    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator

        Parameters
        ----------
        n: ptrdiff_t

        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t

        Parameters
        ----------
        x: swig::SwigPyIterator const &

        """
        return _MMCorePy.SwigPyIterator___sub__(self, *args)

    def __iter__(self):
        return self
SwigPyIterator_swigregister = _MMCorePy.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class CharVector(_object):
    """Proxy of C++ std::vector<(char)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CharVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CharVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(CharVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< char > *

        """
        return _MMCorePy.CharVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(CharVector self) -> bool

        Parameters
        ----------
        self: std::vector< char > const *

        """
        return _MMCorePy.CharVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(CharVector self) -> bool

        Parameters
        ----------
        self: std::vector< char > const *

        """
        return _MMCorePy.CharVector___bool__(self)


    def __len__(self):
        """
        __len__(CharVector self) -> std::vector< char >::size_type

        Parameters
        ----------
        self: std::vector< char > const *

        """
        return _MMCorePy.CharVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(CharVector self, std::vector< char >::difference_type i, std::vector< char >::difference_type j) -> CharVector

        Parameters
        ----------
        i: std::vector< char >::difference_type
        j: std::vector< char >::difference_type

        """
        return _MMCorePy.CharVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(CharVector self, std::vector< char >::difference_type i, std::vector< char >::difference_type j)

        Parameters
        ----------
        i: std::vector< char >::difference_type
        j: std::vector< char >::difference_type

        __setslice__(CharVector self, std::vector< char >::difference_type i, std::vector< char >::difference_type j, CharVector v)

        Parameters
        ----------
        i: std::vector< char >::difference_type
        j: std::vector< char >::difference_type
        v: std::vector< char,std::allocator< char > > const &

        """
        return _MMCorePy.CharVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(CharVector self, std::vector< char >::difference_type i, std::vector< char >::difference_type j)

        Parameters
        ----------
        i: std::vector< char >::difference_type
        j: std::vector< char >::difference_type

        """
        return _MMCorePy.CharVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(CharVector self, std::vector< char >::difference_type i)

        Parameters
        ----------
        i: std::vector< char >::difference_type

        __delitem__(CharVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _MMCorePy.CharVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(CharVector self, PySliceObject * slice) -> CharVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(CharVector self, std::vector< char >::difference_type i) -> std::vector< char >::value_type const &

        Parameters
        ----------
        i: std::vector< char >::difference_type

        """
        return _MMCorePy.CharVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(CharVector self, PySliceObject * slice, CharVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< char,std::allocator< char > > const &

        __setitem__(CharVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(CharVector self, std::vector< char >::difference_type i, std::vector< char >::value_type const & x)

        Parameters
        ----------
        i: std::vector< char >::difference_type
        x: std::vector< char >::value_type const &

        """
        return _MMCorePy.CharVector___setitem__(self, *args)


    def pop(self):
        """
        pop(CharVector self) -> std::vector< char >::value_type

        Parameters
        ----------
        self: std::vector< char > *

        """
        return _MMCorePy.CharVector_pop(self)


    def append(self, x):
        """
        append(CharVector self, std::vector< char >::value_type const & x)

        Parameters
        ----------
        x: std::vector< char >::value_type const &

        """
        return _MMCorePy.CharVector_append(self, x)


    def empty(self):
        """
        empty(CharVector self) -> bool

        Parameters
        ----------
        self: std::vector< char > const *

        """
        return _MMCorePy.CharVector_empty(self)


    def size(self):
        """
        size(CharVector self) -> std::vector< char >::size_type

        Parameters
        ----------
        self: std::vector< char > const *

        """
        return _MMCorePy.CharVector_size(self)


    def swap(self, v):
        """
        swap(CharVector self, CharVector v)

        Parameters
        ----------
        v: std::vector< char > &

        """
        return _MMCorePy.CharVector_swap(self, v)


    def begin(self):
        """
        begin(CharVector self) -> std::vector< char >::iterator

        Parameters
        ----------
        self: std::vector< char > *

        """
        return _MMCorePy.CharVector_begin(self)


    def end(self):
        """
        end(CharVector self) -> std::vector< char >::iterator

        Parameters
        ----------
        self: std::vector< char > *

        """
        return _MMCorePy.CharVector_end(self)


    def rbegin(self):
        """
        rbegin(CharVector self) -> std::vector< char >::reverse_iterator

        Parameters
        ----------
        self: std::vector< char > *

        """
        return _MMCorePy.CharVector_rbegin(self)


    def rend(self):
        """
        rend(CharVector self) -> std::vector< char >::reverse_iterator

        Parameters
        ----------
        self: std::vector< char > *

        """
        return _MMCorePy.CharVector_rend(self)


    def clear(self):
        """
        clear(CharVector self)

        Parameters
        ----------
        self: std::vector< char > *

        """
        return _MMCorePy.CharVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(CharVector self) -> std::vector< char >::allocator_type

        Parameters
        ----------
        self: std::vector< char > const *

        """
        return _MMCorePy.CharVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(CharVector self)

        Parameters
        ----------
        self: std::vector< char > *

        """
        return _MMCorePy.CharVector_pop_back(self)


    def erase(self, *args):
        """
        erase(CharVector self, std::vector< char >::iterator pos) -> std::vector< char >::iterator

        Parameters
        ----------
        pos: std::vector< char >::iterator

        erase(CharVector self, std::vector< char >::iterator first, std::vector< char >::iterator last) -> std::vector< char >::iterator

        Parameters
        ----------
        first: std::vector< char >::iterator
        last: std::vector< char >::iterator

        """
        return _MMCorePy.CharVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(char)> self) -> CharVector
        __init__(std::vector<(char)> self, CharVector arg2) -> CharVector

        Parameters
        ----------
        arg2: std::vector< char > const &

        __init__(std::vector<(char)> self, std::vector< char >::size_type size) -> CharVector

        Parameters
        ----------
        size: std::vector< char >::size_type

        __init__(std::vector<(char)> self, std::vector< char >::size_type size, std::vector< char >::value_type const & value) -> CharVector

        Parameters
        ----------
        size: std::vector< char >::size_type
        value: std::vector< char >::value_type const &

        """
        this = _MMCorePy.new_CharVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(CharVector self, std::vector< char >::value_type const & x)

        Parameters
        ----------
        x: std::vector< char >::value_type const &

        """
        return _MMCorePy.CharVector_push_back(self, x)


    def front(self):
        """
        front(CharVector self) -> std::vector< char >::value_type const &

        Parameters
        ----------
        self: std::vector< char > const *

        """
        return _MMCorePy.CharVector_front(self)


    def back(self):
        """
        back(CharVector self) -> std::vector< char >::value_type const &

        Parameters
        ----------
        self: std::vector< char > const *

        """
        return _MMCorePy.CharVector_back(self)


    def assign(self, n, x):
        """
        assign(CharVector self, std::vector< char >::size_type n, std::vector< char >::value_type const & x)

        Parameters
        ----------
        n: std::vector< char >::size_type
        x: std::vector< char >::value_type const &

        """
        return _MMCorePy.CharVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(CharVector self, std::vector< char >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< char >::size_type

        resize(CharVector self, std::vector< char >::size_type new_size, std::vector< char >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< char >::size_type
        x: std::vector< char >::value_type const &

        """
        return _MMCorePy.CharVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(CharVector self, std::vector< char >::iterator pos, std::vector< char >::value_type const & x) -> std::vector< char >::iterator

        Parameters
        ----------
        pos: std::vector< char >::iterator
        x: std::vector< char >::value_type const &

        insert(CharVector self, std::vector< char >::iterator pos, std::vector< char >::size_type n, std::vector< char >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< char >::iterator
        n: std::vector< char >::size_type
        x: std::vector< char >::value_type const &

        """
        return _MMCorePy.CharVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(CharVector self, std::vector< char >::size_type n)

        Parameters
        ----------
        n: std::vector< char >::size_type

        """
        return _MMCorePy.CharVector_reserve(self, n)


    def capacity(self):
        """
        capacity(CharVector self) -> std::vector< char >::size_type

        Parameters
        ----------
        self: std::vector< char > const *

        """
        return _MMCorePy.CharVector_capacity(self)

    __swig_destroy__ = _MMCorePy.delete_CharVector
    __del__ = lambda self: None
CharVector_swigregister = _MMCorePy.CharVector_swigregister
CharVector_swigregister(CharVector)

class LongVector(_object):
    """Proxy of C++ std::vector<(long)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(LongVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< long > *

        """
        return _MMCorePy.LongVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(LongVector self) -> bool

        Parameters
        ----------
        self: std::vector< long > const *

        """
        return _MMCorePy.LongVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(LongVector self) -> bool

        Parameters
        ----------
        self: std::vector< long > const *

        """
        return _MMCorePy.LongVector___bool__(self)


    def __len__(self):
        """
        __len__(LongVector self) -> std::vector< long >::size_type

        Parameters
        ----------
        self: std::vector< long > const *

        """
        return _MMCorePy.LongVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(LongVector self, std::vector< long >::difference_type i, std::vector< long >::difference_type j) -> LongVector

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type

        """
        return _MMCorePy.LongVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(LongVector self, std::vector< long >::difference_type i, std::vector< long >::difference_type j)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type

        __setslice__(LongVector self, std::vector< long >::difference_type i, std::vector< long >::difference_type j, LongVector v)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type
        v: std::vector< long,std::allocator< long > > const &

        """
        return _MMCorePy.LongVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(LongVector self, std::vector< long >::difference_type i, std::vector< long >::difference_type j)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        j: std::vector< long >::difference_type

        """
        return _MMCorePy.LongVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(LongVector self, std::vector< long >::difference_type i)

        Parameters
        ----------
        i: std::vector< long >::difference_type

        __delitem__(LongVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _MMCorePy.LongVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(LongVector self, PySliceObject * slice) -> LongVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(LongVector self, std::vector< long >::difference_type i) -> std::vector< long >::value_type const &

        Parameters
        ----------
        i: std::vector< long >::difference_type

        """
        return _MMCorePy.LongVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(LongVector self, PySliceObject * slice, LongVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< long,std::allocator< long > > const &

        __setitem__(LongVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(LongVector self, std::vector< long >::difference_type i, std::vector< long >::value_type const & x)

        Parameters
        ----------
        i: std::vector< long >::difference_type
        x: std::vector< long >::value_type const &

        """
        return _MMCorePy.LongVector___setitem__(self, *args)


    def pop(self):
        """
        pop(LongVector self) -> std::vector< long >::value_type

        Parameters
        ----------
        self: std::vector< long > *

        """
        return _MMCorePy.LongVector_pop(self)


    def append(self, x):
        """
        append(LongVector self, std::vector< long >::value_type const & x)

        Parameters
        ----------
        x: std::vector< long >::value_type const &

        """
        return _MMCorePy.LongVector_append(self, x)


    def empty(self):
        """
        empty(LongVector self) -> bool

        Parameters
        ----------
        self: std::vector< long > const *

        """
        return _MMCorePy.LongVector_empty(self)


    def size(self):
        """
        size(LongVector self) -> std::vector< long >::size_type

        Parameters
        ----------
        self: std::vector< long > const *

        """
        return _MMCorePy.LongVector_size(self)


    def swap(self, v):
        """
        swap(LongVector self, LongVector v)

        Parameters
        ----------
        v: std::vector< long > &

        """
        return _MMCorePy.LongVector_swap(self, v)


    def begin(self):
        """
        begin(LongVector self) -> std::vector< long >::iterator

        Parameters
        ----------
        self: std::vector< long > *

        """
        return _MMCorePy.LongVector_begin(self)


    def end(self):
        """
        end(LongVector self) -> std::vector< long >::iterator

        Parameters
        ----------
        self: std::vector< long > *

        """
        return _MMCorePy.LongVector_end(self)


    def rbegin(self):
        """
        rbegin(LongVector self) -> std::vector< long >::reverse_iterator

        Parameters
        ----------
        self: std::vector< long > *

        """
        return _MMCorePy.LongVector_rbegin(self)


    def rend(self):
        """
        rend(LongVector self) -> std::vector< long >::reverse_iterator

        Parameters
        ----------
        self: std::vector< long > *

        """
        return _MMCorePy.LongVector_rend(self)


    def clear(self):
        """
        clear(LongVector self)

        Parameters
        ----------
        self: std::vector< long > *

        """
        return _MMCorePy.LongVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(LongVector self) -> std::vector< long >::allocator_type

        Parameters
        ----------
        self: std::vector< long > const *

        """
        return _MMCorePy.LongVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(LongVector self)

        Parameters
        ----------
        self: std::vector< long > *

        """
        return _MMCorePy.LongVector_pop_back(self)


    def erase(self, *args):
        """
        erase(LongVector self, std::vector< long >::iterator pos) -> std::vector< long >::iterator

        Parameters
        ----------
        pos: std::vector< long >::iterator

        erase(LongVector self, std::vector< long >::iterator first, std::vector< long >::iterator last) -> std::vector< long >::iterator

        Parameters
        ----------
        first: std::vector< long >::iterator
        last: std::vector< long >::iterator

        """
        return _MMCorePy.LongVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(long)> self) -> LongVector
        __init__(std::vector<(long)> self, LongVector arg2) -> LongVector

        Parameters
        ----------
        arg2: std::vector< long > const &

        __init__(std::vector<(long)> self, std::vector< long >::size_type size) -> LongVector

        Parameters
        ----------
        size: std::vector< long >::size_type

        __init__(std::vector<(long)> self, std::vector< long >::size_type size, std::vector< long >::value_type const & value) -> LongVector

        Parameters
        ----------
        size: std::vector< long >::size_type
        value: std::vector< long >::value_type const &

        """
        this = _MMCorePy.new_LongVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(LongVector self, std::vector< long >::value_type const & x)

        Parameters
        ----------
        x: std::vector< long >::value_type const &

        """
        return _MMCorePy.LongVector_push_back(self, x)


    def front(self):
        """
        front(LongVector self) -> std::vector< long >::value_type const &

        Parameters
        ----------
        self: std::vector< long > const *

        """
        return _MMCorePy.LongVector_front(self)


    def back(self):
        """
        back(LongVector self) -> std::vector< long >::value_type const &

        Parameters
        ----------
        self: std::vector< long > const *

        """
        return _MMCorePy.LongVector_back(self)


    def assign(self, n, x):
        """
        assign(LongVector self, std::vector< long >::size_type n, std::vector< long >::value_type const & x)

        Parameters
        ----------
        n: std::vector< long >::size_type
        x: std::vector< long >::value_type const &

        """
        return _MMCorePy.LongVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(LongVector self, std::vector< long >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< long >::size_type

        resize(LongVector self, std::vector< long >::size_type new_size, std::vector< long >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< long >::size_type
        x: std::vector< long >::value_type const &

        """
        return _MMCorePy.LongVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(LongVector self, std::vector< long >::iterator pos, std::vector< long >::value_type const & x) -> std::vector< long >::iterator

        Parameters
        ----------
        pos: std::vector< long >::iterator
        x: std::vector< long >::value_type const &

        insert(LongVector self, std::vector< long >::iterator pos, std::vector< long >::size_type n, std::vector< long >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< long >::iterator
        n: std::vector< long >::size_type
        x: std::vector< long >::value_type const &

        """
        return _MMCorePy.LongVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(LongVector self, std::vector< long >::size_type n)

        Parameters
        ----------
        n: std::vector< long >::size_type

        """
        return _MMCorePy.LongVector_reserve(self, n)


    def capacity(self):
        """
        capacity(LongVector self) -> std::vector< long >::size_type

        Parameters
        ----------
        self: std::vector< long > const *

        """
        return _MMCorePy.LongVector_capacity(self)

    __swig_destroy__ = _MMCorePy.delete_LongVector
    __del__ = lambda self: None
LongVector_swigregister = _MMCorePy.LongVector_swigregister
LongVector_swigregister(LongVector)

class DoubleVector(_object):
    """Proxy of C++ std::vector<(double)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(DoubleVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _MMCorePy.DoubleVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _MMCorePy.DoubleVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _MMCorePy.DoubleVector___bool__(self)


    def __len__(self):
        """
        __len__(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _MMCorePy.DoubleVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> DoubleVector

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _MMCorePy.DoubleVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        __setslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, DoubleVector v)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type
        v: std::vector< double,std::allocator< double > > const &

        """
        return _MMCorePy.DoubleVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        j: std::vector< double >::difference_type

        """
        return _MMCorePy.DoubleVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(DoubleVector self, std::vector< double >::difference_type i)

        Parameters
        ----------
        i: std::vector< double >::difference_type

        __delitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _MMCorePy.DoubleVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(DoubleVector self, PySliceObject * slice) -> DoubleVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(DoubleVector self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &

        Parameters
        ----------
        i: std::vector< double >::difference_type

        """
        return _MMCorePy.DoubleVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(DoubleVector self, PySliceObject * slice, DoubleVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< double,std::allocator< double > > const &

        __setitem__(DoubleVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(DoubleVector self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)

        Parameters
        ----------
        i: std::vector< double >::difference_type
        x: std::vector< double >::value_type const &

        """
        return _MMCorePy.DoubleVector___setitem__(self, *args)


    def pop(self):
        """
        pop(DoubleVector self) -> std::vector< double >::value_type

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _MMCorePy.DoubleVector_pop(self)


    def append(self, x):
        """
        append(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _MMCorePy.DoubleVector_append(self, x)


    def empty(self):
        """
        empty(DoubleVector self) -> bool

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _MMCorePy.DoubleVector_empty(self)


    def size(self):
        """
        size(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _MMCorePy.DoubleVector_size(self)


    def swap(self, v):
        """
        swap(DoubleVector self, DoubleVector v)

        Parameters
        ----------
        v: std::vector< double > &

        """
        return _MMCorePy.DoubleVector_swap(self, v)


    def begin(self):
        """
        begin(DoubleVector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _MMCorePy.DoubleVector_begin(self)


    def end(self):
        """
        end(DoubleVector self) -> std::vector< double >::iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _MMCorePy.DoubleVector_end(self)


    def rbegin(self):
        """
        rbegin(DoubleVector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _MMCorePy.DoubleVector_rbegin(self)


    def rend(self):
        """
        rend(DoubleVector self) -> std::vector< double >::reverse_iterator

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _MMCorePy.DoubleVector_rend(self)


    def clear(self):
        """
        clear(DoubleVector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _MMCorePy.DoubleVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(DoubleVector self) -> std::vector< double >::allocator_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _MMCorePy.DoubleVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(DoubleVector self)

        Parameters
        ----------
        self: std::vector< double > *

        """
        return _MMCorePy.DoubleVector_pop_back(self)


    def erase(self, *args):
        """
        erase(DoubleVector self, std::vector< double >::iterator pos) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator

        erase(DoubleVector self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator

        Parameters
        ----------
        first: std::vector< double >::iterator
        last: std::vector< double >::iterator

        """
        return _MMCorePy.DoubleVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(double)> self) -> DoubleVector
        __init__(std::vector<(double)> self, DoubleVector arg2) -> DoubleVector

        Parameters
        ----------
        arg2: std::vector< double > const &

        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type

        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> DoubleVector

        Parameters
        ----------
        size: std::vector< double >::size_type
        value: std::vector< double >::value_type const &

        """
        this = _MMCorePy.new_DoubleVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(DoubleVector self, std::vector< double >::value_type const & x)

        Parameters
        ----------
        x: std::vector< double >::value_type const &

        """
        return _MMCorePy.DoubleVector_push_back(self, x)


    def front(self):
        """
        front(DoubleVector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _MMCorePy.DoubleVector_front(self)


    def back(self):
        """
        back(DoubleVector self) -> std::vector< double >::value_type const &

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _MMCorePy.DoubleVector_back(self)


    def assign(self, n, x):
        """
        assign(DoubleVector self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _MMCorePy.DoubleVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(DoubleVector self, std::vector< double >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< double >::size_type

        resize(DoubleVector self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _MMCorePy.DoubleVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator

        Parameters
        ----------
        pos: std::vector< double >::iterator
        x: std::vector< double >::value_type const &

        insert(DoubleVector self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< double >::iterator
        n: std::vector< double >::size_type
        x: std::vector< double >::value_type const &

        """
        return _MMCorePy.DoubleVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(DoubleVector self, std::vector< double >::size_type n)

        Parameters
        ----------
        n: std::vector< double >::size_type

        """
        return _MMCorePy.DoubleVector_reserve(self, n)


    def capacity(self):
        """
        capacity(DoubleVector self) -> std::vector< double >::size_type

        Parameters
        ----------
        self: std::vector< double > const *

        """
        return _MMCorePy.DoubleVector_capacity(self)

    __swig_destroy__ = _MMCorePy.delete_DoubleVector
    __del__ = lambda self: None
DoubleVector_swigregister = _MMCorePy.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class StrVector(_object):
    """Proxy of C++ std::vector<(std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrVector, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(StrVector self) -> SwigPyIterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _MMCorePy.StrVector_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(StrVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _MMCorePy.StrVector___nonzero__(self)


    def __bool__(self):
        """
        __bool__(StrVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _MMCorePy.StrVector___bool__(self)


    def __len__(self):
        """
        __len__(StrVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _MMCorePy.StrVector___len__(self)


    def __getslice__(self, i, j):
        """
        __getslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> StrVector

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _MMCorePy.StrVector___getslice__(self, i, j)


    def __setslice__(self, *args):
        """
        __setslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        __setslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, StrVector v)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type
        v: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _MMCorePy.StrVector___setslice__(self, *args)


    def __delslice__(self, i, j):
        """
        __delslice__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        j: std::vector< std::string >::difference_type

        """
        return _MMCorePy.StrVector___delslice__(self, i, j)


    def __delitem__(self, *args):
        """
        __delitem__(StrVector self, std::vector< std::string >::difference_type i)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        __delitem__(StrVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        """
        return _MMCorePy.StrVector___delitem__(self, *args)


    def __getitem__(self, *args):
        """
        __getitem__(StrVector self, PySliceObject * slice) -> StrVector

        Parameters
        ----------
        slice: PySliceObject *

        __getitem__(StrVector self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        i: std::vector< std::string >::difference_type

        """
        return _MMCorePy.StrVector___getitem__(self, *args)


    def __setitem__(self, *args):
        """
        __setitem__(StrVector self, PySliceObject * slice, StrVector v)

        Parameters
        ----------
        slice: PySliceObject *
        v: std::vector< std::string,std::allocator< std::string > > const &

        __setitem__(StrVector self, PySliceObject * slice)

        Parameters
        ----------
        slice: PySliceObject *

        __setitem__(StrVector self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        i: std::vector< std::string >::difference_type
        x: std::vector< std::string >::value_type const &

        """
        return _MMCorePy.StrVector___setitem__(self, *args)


    def pop(self):
        """
        pop(StrVector self) -> std::vector< std::string >::value_type

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _MMCorePy.StrVector_pop(self)


    def append(self, x):
        """
        append(StrVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _MMCorePy.StrVector_append(self, x)


    def empty(self):
        """
        empty(StrVector self) -> bool

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _MMCorePy.StrVector_empty(self)


    def size(self):
        """
        size(StrVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _MMCorePy.StrVector_size(self)


    def swap(self, v):
        """
        swap(StrVector self, StrVector v)

        Parameters
        ----------
        v: std::vector< std::string > &

        """
        return _MMCorePy.StrVector_swap(self, v)


    def begin(self):
        """
        begin(StrVector self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _MMCorePy.StrVector_begin(self)


    def end(self):
        """
        end(StrVector self) -> std::vector< std::string >::iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _MMCorePy.StrVector_end(self)


    def rbegin(self):
        """
        rbegin(StrVector self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _MMCorePy.StrVector_rbegin(self)


    def rend(self):
        """
        rend(StrVector self) -> std::vector< std::string >::reverse_iterator

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _MMCorePy.StrVector_rend(self)


    def clear(self):
        """
        clear(StrVector self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _MMCorePy.StrVector_clear(self)


    def get_allocator(self):
        """
        get_allocator(StrVector self) -> std::vector< std::string >::allocator_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _MMCorePy.StrVector_get_allocator(self)


    def pop_back(self):
        """
        pop_back(StrVector self)

        Parameters
        ----------
        self: std::vector< std::string > *

        """
        return _MMCorePy.StrVector_pop_back(self)


    def erase(self, *args):
        """
        erase(StrVector self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator

        erase(StrVector self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator

        Parameters
        ----------
        first: std::vector< std::string >::iterator
        last: std::vector< std::string >::iterator

        """
        return _MMCorePy.StrVector_erase(self, *args)


    def __init__(self, *args):
        """
        __init__(std::vector<(std::string)> self) -> StrVector
        __init__(std::vector<(std::string)> self, StrVector arg2) -> StrVector

        Parameters
        ----------
        arg2: std::vector< std::string > const &

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> StrVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type

        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> StrVector

        Parameters
        ----------
        size: std::vector< std::string >::size_type
        value: std::vector< std::string >::value_type const &

        """
        this = _MMCorePy.new_StrVector(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def push_back(self, x):
        """
        push_back(StrVector self, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        x: std::vector< std::string >::value_type const &

        """
        return _MMCorePy.StrVector_push_back(self, x)


    def front(self):
        """
        front(StrVector self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _MMCorePy.StrVector_front(self)


    def back(self):
        """
        back(StrVector self) -> std::vector< std::string >::value_type const &

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _MMCorePy.StrVector_back(self)


    def assign(self, n, x):
        """
        assign(StrVector self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _MMCorePy.StrVector_assign(self, n, x)


    def resize(self, *args):
        """
        resize(StrVector self, std::vector< std::string >::size_type new_size)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type

        resize(StrVector self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        new_size: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _MMCorePy.StrVector_resize(self, *args)


    def insert(self, *args):
        """
        insert(StrVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        x: std::vector< std::string >::value_type const &

        insert(StrVector self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)

        Parameters
        ----------
        pos: std::vector< std::string >::iterator
        n: std::vector< std::string >::size_type
        x: std::vector< std::string >::value_type const &

        """
        return _MMCorePy.StrVector_insert(self, *args)


    def reserve(self, n):
        """
        reserve(StrVector self, std::vector< std::string >::size_type n)

        Parameters
        ----------
        n: std::vector< std::string >::size_type

        """
        return _MMCorePy.StrVector_reserve(self, n)


    def capacity(self):
        """
        capacity(StrVector self) -> std::vector< std::string >::size_type

        Parameters
        ----------
        self: std::vector< std::string > const *

        """
        return _MMCorePy.StrVector_capacity(self)

    __swig_destroy__ = _MMCorePy.delete_StrVector
    __del__ = lambda self: None
StrVector_swigregister = _MMCorePy.StrVector_swigregister
StrVector_swigregister(StrVector)

class pair_ss(_object):
    """Proxy of C++ std::pair<(std::string,std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, pair_ss, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, pair_ss, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(std::pair<(std::string,std::string)> self) -> pair_ss
        __init__(std::pair<(std::string,std::string)> self, std::string first, std::string second) -> pair_ss

        Parameters
        ----------
        first: std::string
        second: std::string

        __init__(std::pair<(std::string,std::string)> self, pair_ss p) -> pair_ss

        Parameters
        ----------
        p: std::pair< std::string,std::string > const &

        """
        this = _MMCorePy.new_pair_ss(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_setmethods__["first"] = _MMCorePy.pair_ss_first_set
    __swig_getmethods__["first"] = _MMCorePy.pair_ss_first_get
    if _newclass:
        first = _swig_property(_MMCorePy.pair_ss_first_get, _MMCorePy.pair_ss_first_set)
    __swig_setmethods__["second"] = _MMCorePy.pair_ss_second_set
    __swig_getmethods__["second"] = _MMCorePy.pair_ss_second_get
    if _newclass:
        second = _swig_property(_MMCorePy.pair_ss_second_get, _MMCorePy.pair_ss_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _MMCorePy.delete_pair_ss
    __del__ = lambda self: None
pair_ss_swigregister = _MMCorePy.pair_ss_swigregister
pair_ss_swigregister(pair_ss)

class StrMap(_object):
    """Proxy of C++ std::map<(std::string,std::string)> class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StrMap, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StrMap, name)
    __repr__ = _swig_repr

    def iterator(self):
        """
        iterator(StrMap self) -> SwigPyIterator

        Parameters
        ----------
        self: std::map< std::string,std::string > *

        """
        return _MMCorePy.StrMap_iterator(self)

    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        """
        __nonzero__(StrMap self) -> bool

        Parameters
        ----------
        self: std::map< std::string,std::string > const *

        """
        return _MMCorePy.StrMap___nonzero__(self)


    def __bool__(self):
        """
        __bool__(StrMap self) -> bool

        Parameters
        ----------
        self: std::map< std::string,std::string > const *

        """
        return _MMCorePy.StrMap___bool__(self)


    def __len__(self):
        """
        __len__(StrMap self) -> std::map< std::string,std::string >::size_type

        Parameters
        ----------
        self: std::map< std::string,std::string > const *

        """
        return _MMCorePy.StrMap___len__(self)

    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        """
        __getitem__(StrMap self, std::map< std::string,std::string >::key_type const & key) -> std::map< std::string,std::string >::mapped_type const &

        Parameters
        ----------
        key: std::map< std::string,std::string >::key_type const &

        """
        return _MMCorePy.StrMap___getitem__(self, key)


    def __delitem__(self, key):
        """
        __delitem__(StrMap self, std::map< std::string,std::string >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::string >::key_type const &

        """
        return _MMCorePy.StrMap___delitem__(self, key)


    def has_key(self, key):
        """
        has_key(StrMap self, std::map< std::string,std::string >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::string >::key_type const &

        """
        return _MMCorePy.StrMap_has_key(self, key)


    def keys(self):
        """
        keys(StrMap self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::string > *

        """
        return _MMCorePy.StrMap_keys(self)


    def values(self):
        """
        values(StrMap self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::string > *

        """
        return _MMCorePy.StrMap_values(self)


    def items(self):
        """
        items(StrMap self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::string > *

        """
        return _MMCorePy.StrMap_items(self)


    def __contains__(self, key):
        """
        __contains__(StrMap self, std::map< std::string,std::string >::key_type const & key) -> bool

        Parameters
        ----------
        key: std::map< std::string,std::string >::key_type const &

        """
        return _MMCorePy.StrMap___contains__(self, key)


    def key_iterator(self):
        """
        key_iterator(StrMap self) -> SwigPyIterator

        Parameters
        ----------
        self: std::map< std::string,std::string > *

        """
        return _MMCorePy.StrMap_key_iterator(self)


    def value_iterator(self):
        """
        value_iterator(StrMap self) -> SwigPyIterator

        Parameters
        ----------
        self: std::map< std::string,std::string > *

        """
        return _MMCorePy.StrMap_value_iterator(self)


    def __setitem__(self, *args):
        """
        __setitem__(StrMap self, std::map< std::string,std::string >::key_type const & key)

        Parameters
        ----------
        key: std::map< std::string,std::string >::key_type const &

        __setitem__(StrMap self, std::map< std::string,std::string >::key_type const & key, std::map< std::string,std::string >::mapped_type const & x)

        Parameters
        ----------
        key: std::map< std::string,std::string >::key_type const &
        x: std::map< std::string,std::string >::mapped_type const &

        """
        return _MMCorePy.StrMap___setitem__(self, *args)


    def asdict(self):
        """
        asdict(StrMap self) -> PyObject *

        Parameters
        ----------
        self: std::map< std::string,std::string > *

        """
        return _MMCorePy.StrMap_asdict(self)


    def __init__(self, *args):
        """
        __init__(std::map<(std::string,std::string)> self, std::less< std::string > const & arg2) -> StrMap

        Parameters
        ----------
        arg2: std::less< std::string > const &

        __init__(std::map<(std::string,std::string)> self) -> StrMap
        __init__(std::map<(std::string,std::string)> self, StrMap arg2) -> StrMap

        Parameters
        ----------
        arg2: std::map< std::string,std::string > const &

        """
        this = _MMCorePy.new_StrMap(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def empty(self):
        """
        empty(StrMap self) -> bool

        Parameters
        ----------
        self: std::map< std::string,std::string > const *

        """
        return _MMCorePy.StrMap_empty(self)


    def size(self):
        """
        size(StrMap self) -> std::map< std::string,std::string >::size_type

        Parameters
        ----------
        self: std::map< std::string,std::string > const *

        """
        return _MMCorePy.StrMap_size(self)


    def swap(self, v):
        """
        swap(StrMap self, StrMap v)

        Parameters
        ----------
        v: std::map< std::string,std::string > &

        """
        return _MMCorePy.StrMap_swap(self, v)


    def begin(self):
        """
        begin(StrMap self) -> std::map< std::string,std::string >::iterator

        Parameters
        ----------
        self: std::map< std::string,std::string > *

        """
        return _MMCorePy.StrMap_begin(self)


    def end(self):
        """
        end(StrMap self) -> std::map< std::string,std::string >::iterator

        Parameters
        ----------
        self: std::map< std::string,std::string > *

        """
        return _MMCorePy.StrMap_end(self)


    def rbegin(self):
        """
        rbegin(StrMap self) -> std::map< std::string,std::string >::reverse_iterator

        Parameters
        ----------
        self: std::map< std::string,std::string > *

        """
        return _MMCorePy.StrMap_rbegin(self)


    def rend(self):
        """
        rend(StrMap self) -> std::map< std::string,std::string >::reverse_iterator

        Parameters
        ----------
        self: std::map< std::string,std::string > *

        """
        return _MMCorePy.StrMap_rend(self)


    def clear(self):
        """
        clear(StrMap self)

        Parameters
        ----------
        self: std::map< std::string,std::string > *

        """
        return _MMCorePy.StrMap_clear(self)


    def get_allocator(self):
        """
        get_allocator(StrMap self) -> std::map< std::string,std::string >::allocator_type

        Parameters
        ----------
        self: std::map< std::string,std::string > const *

        """
        return _MMCorePy.StrMap_get_allocator(self)


    def count(self, x):
        """
        count(StrMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::string >::key_type const &

        """
        return _MMCorePy.StrMap_count(self, x)


    def erase(self, *args):
        """
        erase(StrMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::size_type

        Parameters
        ----------
        x: std::map< std::string,std::string >::key_type const &

        erase(StrMap self, std::map< std::string,std::string >::iterator position)

        Parameters
        ----------
        position: std::map< std::string,std::string >::iterator

        erase(StrMap self, std::map< std::string,std::string >::iterator first, std::map< std::string,std::string >::iterator last)

        Parameters
        ----------
        first: std::map< std::string,std::string >::iterator
        last: std::map< std::string,std::string >::iterator

        """
        return _MMCorePy.StrMap_erase(self, *args)


    def find(self, x):
        """
        find(StrMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::string >::key_type const &

        """
        return _MMCorePy.StrMap_find(self, x)


    def lower_bound(self, x):
        """
        lower_bound(StrMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::string >::key_type const &

        """
        return _MMCorePy.StrMap_lower_bound(self, x)


    def upper_bound(self, x):
        """
        upper_bound(StrMap self, std::map< std::string,std::string >::key_type const & x) -> std::map< std::string,std::string >::iterator

        Parameters
        ----------
        x: std::map< std::string,std::string >::key_type const &

        """
        return _MMCorePy.StrMap_upper_bound(self, x)

    __swig_destroy__ = _MMCorePy.delete_StrMap
    __del__ = lambda self: None
StrMap_swigregister = _MMCorePy.StrMap_swigregister
StrMap_swigregister(StrMap)

MM_CODE_OK = _MMCorePy.MM_CODE_OK
MM_CODE_ERR = _MMCorePy.MM_CODE_ERR
DEVICE_OK = _MMCorePy.DEVICE_OK
DEVICE_ERR = _MMCorePy.DEVICE_ERR
DEVICE_INVALID_PROPERTY = _MMCorePy.DEVICE_INVALID_PROPERTY
DEVICE_INVALID_PROPERTY_VALUE = _MMCorePy.DEVICE_INVALID_PROPERTY_VALUE
DEVICE_DUPLICATE_PROPERTY = _MMCorePy.DEVICE_DUPLICATE_PROPERTY
DEVICE_INVALID_PROPERTY_TYPE = _MMCorePy.DEVICE_INVALID_PROPERTY_TYPE
DEVICE_NATIVE_MODULE_FAILED = _MMCorePy.DEVICE_NATIVE_MODULE_FAILED
DEVICE_UNSUPPORTED_DATA_FORMAT = _MMCorePy.DEVICE_UNSUPPORTED_DATA_FORMAT
DEVICE_INTERNAL_INCONSISTENCY = _MMCorePy.DEVICE_INTERNAL_INCONSISTENCY
DEVICE_NOT_SUPPORTED = _MMCorePy.DEVICE_NOT_SUPPORTED
DEVICE_UNKNOWN_LABEL = _MMCorePy.DEVICE_UNKNOWN_LABEL
DEVICE_UNSUPPORTED_COMMAND = _MMCorePy.DEVICE_UNSUPPORTED_COMMAND
DEVICE_UNKNOWN_POSITION = _MMCorePy.DEVICE_UNKNOWN_POSITION
DEVICE_NO_CALLBACK_REGISTERED = _MMCorePy.DEVICE_NO_CALLBACK_REGISTERED
DEVICE_SERIAL_COMMAND_FAILED = _MMCorePy.DEVICE_SERIAL_COMMAND_FAILED
DEVICE_SERIAL_BUFFER_OVERRUN = _MMCorePy.DEVICE_SERIAL_BUFFER_OVERRUN
DEVICE_SERIAL_INVALID_RESPONSE = _MMCorePy.DEVICE_SERIAL_INVALID_RESPONSE
DEVICE_SERIAL_TIMEOUT = _MMCorePy.DEVICE_SERIAL_TIMEOUT
DEVICE_SELF_REFERENCE = _MMCorePy.DEVICE_SELF_REFERENCE
DEVICE_NO_PROPERTY_DATA = _MMCorePy.DEVICE_NO_PROPERTY_DATA
DEVICE_DUPLICATE_LABEL = _MMCorePy.DEVICE_DUPLICATE_LABEL
DEVICE_INVALID_INPUT_PARAM = _MMCorePy.DEVICE_INVALID_INPUT_PARAM
DEVICE_BUFFER_OVERFLOW = _MMCorePy.DEVICE_BUFFER_OVERFLOW
DEVICE_NONEXISTENT_CHANNEL = _MMCorePy.DEVICE_NONEXISTENT_CHANNEL
DEVICE_INVALID_PROPERTY_LIMTS = _MMCorePy.DEVICE_INVALID_PROPERTY_LIMTS
DEVICE_SNAP_IMAGE_FAILED = _MMCorePy.DEVICE_SNAP_IMAGE_FAILED
DEVICE_IMAGE_PARAMS_FAILED = _MMCorePy.DEVICE_IMAGE_PARAMS_FAILED
DEVICE_CORE_FOCUS_STAGE_UNDEF = _MMCorePy.DEVICE_CORE_FOCUS_STAGE_UNDEF
DEVICE_CORE_EXPOSURE_FAILED = _MMCorePy.DEVICE_CORE_EXPOSURE_FAILED
DEVICE_CORE_CONFIG_FAILED = _MMCorePy.DEVICE_CORE_CONFIG_FAILED
DEVICE_CAMERA_BUSY_ACQUIRING = _MMCorePy.DEVICE_CAMERA_BUSY_ACQUIRING
DEVICE_INCOMPATIBLE_IMAGE = _MMCorePy.DEVICE_INCOMPATIBLE_IMAGE
DEVICE_CAN_NOT_SET_PROPERTY = _MMCorePy.DEVICE_CAN_NOT_SET_PROPERTY
DEVICE_CORE_CHANNEL_PRESETS_FAILED = _MMCorePy.DEVICE_CORE_CHANNEL_PRESETS_FAILED
DEVICE_LOCALLY_DEFINED_ERROR = _MMCorePy.DEVICE_LOCALLY_DEFINED_ERROR
DEVICE_NOT_CONNECTED = _MMCorePy.DEVICE_NOT_CONNECTED
DEVICE_COMM_HUB_MISSING = _MMCorePy.DEVICE_COMM_HUB_MISSING
DEVICE_DUPLICATE_LIBRARY = _MMCorePy.DEVICE_DUPLICATE_LIBRARY
DEVICE_PROPERTY_NOT_SEQUENCEABLE = _MMCorePy.DEVICE_PROPERTY_NOT_SEQUENCEABLE
DEVICE_SEQUENCE_TOO_LARGE = _MMCorePy.DEVICE_SEQUENCE_TOO_LARGE
DEVICE_OUT_OF_MEMORY = _MMCorePy.DEVICE_OUT_OF_MEMORY
DEVICE_NOT_YET_IMPLEMENTED = _MMCorePy.DEVICE_NOT_YET_IMPLEMENTED
UnknownType = _MMCorePy.UnknownType
AnyType = _MMCorePy.AnyType
CameraDevice = _MMCorePy.CameraDevice
ShutterDevice = _MMCorePy.ShutterDevice
StateDevice = _MMCorePy.StateDevice
StageDevice = _MMCorePy.StageDevice
XYStageDevice = _MMCorePy.XYStageDevice
SerialDevice = _MMCorePy.SerialDevice
GenericDevice = _MMCorePy.GenericDevice
AutoFocusDevice = _MMCorePy.AutoFocusDevice
CoreDevice = _MMCorePy.CoreDevice
ImageProcessorDevice = _MMCorePy.ImageProcessorDevice
SignalIODevice = _MMCorePy.SignalIODevice
MagnifierDevice = _MMCorePy.MagnifierDevice
SLMDevice = _MMCorePy.SLMDevice
HubDevice = _MMCorePy.HubDevice
GalvoDevice = _MMCorePy.GalvoDevice
Undef = _MMCorePy.Undef
String = _MMCorePy.String
Float = _MMCorePy.Float
Integer = _MMCorePy.Integer
NoAction = _MMCorePy.NoAction
BeforeGet = _MMCorePy.BeforeGet
AfterSet = _MMCorePy.AfterSet
IsSequenceable = _MMCorePy.IsSequenceable
AfterLoadSequence = _MMCorePy.AfterLoadSequence
StartSequence = _MMCorePy.StartSequence
StopSequence = _MMCorePy.StopSequence
InvalidPort = _MMCorePy.InvalidPort
SerialPort = _MMCorePy.SerialPort
USBPort = _MMCorePy.USBPort
HIDPort = _MMCorePy.HIDPort
FocusDirectionUnknown = _MMCorePy.FocusDirectionUnknown
FocusDirectionTowardSample = _MMCorePy.FocusDirectionTowardSample
FocusDirectionAwayFromSample = _MMCorePy.FocusDirectionAwayFromSample
Attention = _MMCorePy.Attention
Done = _MMCorePy.Done
StatusChanged = _MMCorePy.StatusChanged
Unimplemented = _MMCorePy.Unimplemented
Misconfigured = _MMCorePy.Misconfigured
CanNotCommunicate = _MMCorePy.CanNotCommunicate
CanCommunicate = _MMCorePy.CanCommunicate
class CMMError(Exception):
    """Proxy of C++ CMMError class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMMError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMMError, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(CMMError self, std::string const & msg, CMMError::Code code) -> CMMError

        Parameters
        ----------
        msg: std::string const &
        code: CMMError::Code

        __init__(CMMError self, std::string const & msg) -> CMMError

        Parameters
        ----------
        msg: std::string const &

        __init__(CMMError self, char const * msg, CMMError::Code code) -> CMMError

        Parameters
        ----------
        msg: char const *
        code: CMMError::Code

        __init__(CMMError self, char const * msg) -> CMMError

        Parameters
        ----------
        msg: char const *

        __init__(CMMError self, std::string const & msg, CMMError::Code code, CMMError underlyingError) -> CMMError

        Parameters
        ----------
        msg: std::string const &
        code: CMMError::Code
        underlyingError: CMMError const &

        __init__(CMMError self, char const * msg, CMMError::Code code, CMMError underlyingError) -> CMMError

        Parameters
        ----------
        msg: char const *
        code: CMMError::Code
        underlyingError: CMMError const &

        __init__(CMMError self, std::string const & msg, CMMError underlyingError) -> CMMError

        Parameters
        ----------
        msg: std::string const &
        underlyingError: CMMError const &

        __init__(CMMError self, char const * msg, CMMError underlyingError) -> CMMError

        Parameters
        ----------
        msg: char const *
        underlyingError: CMMError const &

        __init__(CMMError self, CMMError other) -> CMMError

        Parameters
        ----------
        other: CMMError const &

        """
        this = _MMCorePy.new_CMMError(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MMCorePy.delete_CMMError
    __del__ = lambda self: None

    def what(self):
        """
        what(CMMError self) -> char const *

        Parameters
        ----------
        self: CMMError const *

        """
        return _MMCorePy.CMMError_what(self)


    def getMsg(self):
        """
        getMsg(CMMError self) -> std::string

        Parameters
        ----------
        self: CMMError const *

        """
        return _MMCorePy.CMMError_getMsg(self)


    def getFullMsg(self):
        """
        getFullMsg(CMMError self) -> std::string

        Parameters
        ----------
        self: CMMError const *

        """
        return _MMCorePy.CMMError_getFullMsg(self)


    def getCode(self):
        """
        getCode(CMMError self) -> CMMError::Code

        Parameters
        ----------
        self: CMMError const *

        """
        return _MMCorePy.CMMError_getCode(self)


    def getSpecificCode(self):
        """
        getSpecificCode(CMMError self) -> CMMError::Code

        Parameters
        ----------
        self: CMMError const *

        """
        return _MMCorePy.CMMError_getSpecificCode(self)


    def getUnderlyingError(self):
        """
        getUnderlyingError(CMMError self) -> CMMError

        Parameters
        ----------
        self: CMMError const *

        """
        return _MMCorePy.CMMError_getUnderlyingError(self)


    def __getitem__(self, n):
        """
        __getitem__(CMMError self, int n) -> std::string

        Parameters
        ----------
        n: int

        """
        return _MMCorePy.CMMError___getitem__(self, n)


    def __str__(self):
        """
        __str__(CMMError self) -> std::string

        Parameters
        ----------
        self: CMMError *

        """
        return _MMCorePy.CMMError___str__(self)

CMMError_swigregister = _MMCorePy.CMMError_swigregister
CMMError_swigregister(CMMError)
cvar = _MMCorePy.cvar
MaxStrLength = cvar.MaxStrLength
g_Keyword_Name = cvar.g_Keyword_Name
g_Keyword_Description = cvar.g_Keyword_Description
g_Keyword_CameraName = cvar.g_Keyword_CameraName
g_Keyword_CameraID = cvar.g_Keyword_CameraID
g_Keyword_CameraChannelName = cvar.g_Keyword_CameraChannelName
g_Keyword_CameraChannelIndex = cvar.g_Keyword_CameraChannelIndex
g_Keyword_Binning = cvar.g_Keyword_Binning
g_Keyword_Exposure = cvar.g_Keyword_Exposure
g_Keyword_ActualExposure = cvar.g_Keyword_ActualExposure
g_Keyword_ActualInterval_ms = cvar.g_Keyword_ActualInterval_ms
g_Keyword_Interval_ms = cvar.g_Keyword_Interval_ms
g_Keyword_Elapsed_Time_ms = cvar.g_Keyword_Elapsed_Time_ms
g_Keyword_PixelType = cvar.g_Keyword_PixelType
g_Keyword_ReadoutTime = cvar.g_Keyword_ReadoutTime
g_Keyword_ReadoutMode = cvar.g_Keyword_ReadoutMode
g_Keyword_Gain = cvar.g_Keyword_Gain
g_Keyword_EMGain = cvar.g_Keyword_EMGain
g_Keyword_Offset = cvar.g_Keyword_Offset
g_Keyword_CCDTemperature = cvar.g_Keyword_CCDTemperature
g_Keyword_CCDTemperatureSetPoint = cvar.g_Keyword_CCDTemperatureSetPoint
g_Keyword_State = cvar.g_Keyword_State
g_Keyword_Label = cvar.g_Keyword_Label
g_Keyword_Position = cvar.g_Keyword_Position
g_Keyword_Type = cvar.g_Keyword_Type
g_Keyword_Delay = cvar.g_Keyword_Delay
g_Keyword_BaudRate = cvar.g_Keyword_BaudRate
g_Keyword_DataBits = cvar.g_Keyword_DataBits
g_Keyword_StopBits = cvar.g_Keyword_StopBits
g_Keyword_Parity = cvar.g_Keyword_Parity
g_Keyword_Handshaking = cvar.g_Keyword_Handshaking
g_Keyword_DelayBetweenCharsMs = cvar.g_Keyword_DelayBetweenCharsMs
g_Keyword_Port = cvar.g_Keyword_Port
g_Keyword_AnswerTimeout = cvar.g_Keyword_AnswerTimeout
g_Keyword_Speed = cvar.g_Keyword_Speed
g_Keyword_CoreDevice = cvar.g_Keyword_CoreDevice
g_Keyword_CoreInitialize = cvar.g_Keyword_CoreInitialize
g_Keyword_CoreCamera = cvar.g_Keyword_CoreCamera
g_Keyword_CoreShutter = cvar.g_Keyword_CoreShutter
g_Keyword_CoreXYStage = cvar.g_Keyword_CoreXYStage
g_Keyword_CoreFocus = cvar.g_Keyword_CoreFocus
g_Keyword_CoreAutoFocus = cvar.g_Keyword_CoreAutoFocus
g_Keyword_CoreAutoShutter = cvar.g_Keyword_CoreAutoShutter
g_Keyword_CoreChannelGroup = cvar.g_Keyword_CoreChannelGroup
g_Keyword_CoreImageProcessor = cvar.g_Keyword_CoreImageProcessor
g_Keyword_CoreSLM = cvar.g_Keyword_CoreSLM
g_Keyword_CoreGalvo = cvar.g_Keyword_CoreGalvo
g_Keyword_CoreTimeoutMs = cvar.g_Keyword_CoreTimeoutMs
g_Keyword_Channel = cvar.g_Keyword_Channel
g_Keyword_Version = cvar.g_Keyword_Version
g_Keyword_ColorMode = cvar.g_Keyword_ColorMode
g_Keyword_Transpose_SwapXY = cvar.g_Keyword_Transpose_SwapXY
g_Keyword_Transpose_MirrorX = cvar.g_Keyword_Transpose_MirrorX
g_Keyword_Transpose_MirrorY = cvar.g_Keyword_Transpose_MirrorY
g_Keyword_Transpose_Correction = cvar.g_Keyword_Transpose_Correction
g_Keyword_Closed_Position = cvar.g_Keyword_Closed_Position
g_Keyword_HubID = cvar.g_Keyword_HubID
g_Keyword_Meatdata_Exposure = cvar.g_Keyword_Meatdata_Exposure
g_Keyword_Metadata_Score = cvar.g_Keyword_Metadata_Score
g_Keyword_Metadata_ImageNumber = cvar.g_Keyword_Metadata_ImageNumber
g_Keyword_Metadata_StartTime = cvar.g_Keyword_Metadata_StartTime
g_Keyword_Metadata_ROI_X = cvar.g_Keyword_Metadata_ROI_X
g_Keyword_Metadata_ROI_Y = cvar.g_Keyword_Metadata_ROI_Y
g_Keyword_Metadata_TimeInCore = cvar.g_Keyword_Metadata_TimeInCore
g_FieldDelimiters = cvar.g_FieldDelimiters
g_CFGCommand_Device = cvar.g_CFGCommand_Device
g_CFGCommand_Label = cvar.g_CFGCommand_Label
g_CFGCommand_Property = cvar.g_CFGCommand_Property
g_CFGCommand_Configuration = cvar.g_CFGCommand_Configuration
g_CFGCommand_ConfigGroup = cvar.g_CFGCommand_ConfigGroup
g_CFGCommand_Equipment = cvar.g_CFGCommand_Equipment
g_CFGCommand_Delay = cvar.g_CFGCommand_Delay
g_CFGCommand_ImageSynchro = cvar.g_CFGCommand_ImageSynchro
g_CFGCommand_ConfigPixelSize = cvar.g_CFGCommand_ConfigPixelSize
g_CFGCommand_PixelSize_um = cvar.g_CFGCommand_PixelSize_um
g_CFGCommand_PixelSizeAffine = cvar.g_CFGCommand_PixelSizeAffine
g_CFGCommand_ParentID = cvar.g_CFGCommand_ParentID
g_CFGCommand_FocusDirection = cvar.g_CFGCommand_FocusDirection
g_CFGGroup_System = cvar.g_CFGGroup_System
g_CFGGroup_System_Startup = cvar.g_CFGGroup_System_Startup
g_CFGGroup_System_Shutdown = cvar.g_CFGGroup_System_Shutdown
g_CFGGroup_PixelSizeUm = cvar.g_CFGGroup_PixelSizeUm
_DATABITS_5 = cvar._DATABITS_5
_DATABITS_6 = cvar._DATABITS_6
_DATABITS_7 = cvar._DATABITS_7
_DATABITS_8 = cvar._DATABITS_8
_FLOWCONTROL_NONE = cvar._FLOWCONTROL_NONE
_FLOWCONTROL_RTSCTS_IN = cvar._FLOWCONTROL_RTSCTS_IN
_FLOWCONTROL_RTSCTS_OUT = cvar._FLOWCONTROL_RTSCTS_OUT
_FLOWCONTROL_XONXOFF_IN = cvar._FLOWCONTROL_XONXOFF_IN
_FLOWCONTROL_XONXOFF_OUT = cvar._FLOWCONTROL_XONXOFF_OUT
_PARITY_EVEN = cvar._PARITY_EVEN
_PARITY_MARK = cvar._PARITY_MARK
_PARITY_NONE = cvar._PARITY_NONE
_PARITY_ODD = cvar._PARITY_ODD
_PARITY_SPACE = cvar._PARITY_SPACE
_STOPBITS_1 = cvar._STOPBITS_1
_STOPBITS_1_5 = cvar._STOPBITS_1_5
_STOPBITS_2 = cvar._STOPBITS_2

class PropertySetting(_object):
    """Proxy of C++ PropertySetting class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertySetting, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertySetting, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PropertySetting self, char const * deviceLabel, char const * prop, char const * value, bool readOnly=False) -> PropertySetting

        Parameters
        ----------
        deviceLabel: char const *
        prop: char const *
        value: char const *
        readOnly: bool

        __init__(PropertySetting self, char const * deviceLabel, char const * prop, char const * value) -> PropertySetting

        Parameters
        ----------
        deviceLabel: char const *
        prop: char const *
        value: char const *

        __init__(PropertySetting self) -> PropertySetting
        """
        this = _MMCorePy.new_PropertySetting(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MMCorePy.delete_PropertySetting
    __del__ = lambda self: None

    def getDeviceLabel(self):
        """
        getDeviceLabel(PropertySetting self) -> std::string

        Parameters
        ----------
        self: PropertySetting const *

        """
        return _MMCorePy.PropertySetting_getDeviceLabel(self)


    def getPropertyName(self):
        """
        getPropertyName(PropertySetting self) -> std::string

        Parameters
        ----------
        self: PropertySetting const *

        """
        return _MMCorePy.PropertySetting_getPropertyName(self)


    def getReadOnly(self):
        """
        getReadOnly(PropertySetting self) -> bool

        Parameters
        ----------
        self: PropertySetting const *

        """
        return _MMCorePy.PropertySetting_getReadOnly(self)


    def getPropertyValue(self):
        """
        getPropertyValue(PropertySetting self) -> std::string

        Parameters
        ----------
        self: PropertySetting const *

        """
        return _MMCorePy.PropertySetting_getPropertyValue(self)


    def getKey(self):
        """
        getKey(PropertySetting self) -> std::string

        Parameters
        ----------
        self: PropertySetting const *

        """
        return _MMCorePy.PropertySetting_getKey(self)


    def generateKey(device, prop):
        """
        generateKey(char const * device, char const * prop) -> std::string

        Parameters
        ----------
        device: char const *
        prop: char const *

        """
        return _MMCorePy.PropertySetting_generateKey(device, prop)

    generateKey = staticmethod(generateKey)

    def getVerbose(self):
        """
        getVerbose(PropertySetting self) -> std::string

        Parameters
        ----------
        self: PropertySetting const *

        """
        return _MMCorePy.PropertySetting_getVerbose(self)


    def isEqualTo(self, ps):
        """
        isEqualTo(PropertySetting self, PropertySetting ps) -> bool

        Parameters
        ----------
        ps: PropertySetting const &

        """
        return _MMCorePy.PropertySetting_isEqualTo(self, ps)

PropertySetting_swigregister = _MMCorePy.PropertySetting_swigregister
PropertySetting_swigregister(PropertySetting)

def PropertySetting_generateKey(device, prop):
    """
    PropertySetting_generateKey(char const * device, char const * prop) -> std::string

    Parameters
    ----------
    device: char const *
    prop: char const *

    """
    return _MMCorePy.PropertySetting_generateKey(device, prop)

class PropertyPair(_object):
    """Proxy of C++ PropertyPair class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyPair, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyPair, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(PropertyPair self, char const * prop, char const * value) -> PropertyPair

        Parameters
        ----------
        prop: char const *
        value: char const *

        __init__(PropertyPair self) -> PropertyPair
        """
        this = _MMCorePy.new_PropertyPair(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MMCorePy.delete_PropertyPair
    __del__ = lambda self: None

    def getPropertyName(self):
        """
        getPropertyName(PropertyPair self) -> std::string

        Parameters
        ----------
        self: PropertyPair const *

        """
        return _MMCorePy.PropertyPair_getPropertyName(self)


    def getPropertyValue(self):
        """
        getPropertyValue(PropertyPair self) -> std::string

        Parameters
        ----------
        self: PropertyPair const *

        """
        return _MMCorePy.PropertyPair_getPropertyValue(self)

PropertyPair_swigregister = _MMCorePy.PropertyPair_swigregister
PropertyPair_swigregister(PropertyPair)

class Configuration(_object):
    """Proxy of C++ Configuration class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Configuration, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Configuration, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(Configuration self) -> Configuration"""
        this = _MMCorePy.new_Configuration()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MMCorePy.delete_Configuration
    __del__ = lambda self: None

    def addSetting(self, setting):
        """
        addSetting(Configuration self, PropertySetting setting)

        Parameters
        ----------
        setting: PropertySetting const &

        """
        return _MMCorePy.Configuration_addSetting(self, setting)


    def deleteSetting(self, device, prop):
        """
        deleteSetting(Configuration self, char const * device, char const * prop)

        Parameters
        ----------
        device: char const *
        prop: char const *

        """
        return _MMCorePy.Configuration_deleteSetting(self, device, prop)


    def isPropertyIncluded(self, device, property):
        """
        isPropertyIncluded(Configuration self, char const * device, char const * property) -> bool

        Parameters
        ----------
        device: char const *
        property: char const *

        """
        return _MMCorePy.Configuration_isPropertyIncluded(self, device, property)


    def isSettingIncluded(self, ps):
        """
        isSettingIncluded(Configuration self, PropertySetting ps) -> bool

        Parameters
        ----------
        ps: PropertySetting const &

        """
        return _MMCorePy.Configuration_isSettingIncluded(self, ps)


    def isConfigurationIncluded(self, cfg):
        """
        isConfigurationIncluded(Configuration self, Configuration cfg) -> bool

        Parameters
        ----------
        cfg: Configuration const &

        """
        return _MMCorePy.Configuration_isConfigurationIncluded(self, cfg)


    def getSetting(self, *args):
        """
        getSetting(Configuration self, size_t index) -> PropertySetting

        Parameters
        ----------
        index: size_t

        getSetting(Configuration self, char const * device, char const * prop) -> PropertySetting

        Parameters
        ----------
        device: char const *
        prop: char const *

        """
        return _MMCorePy.Configuration_getSetting(self, *args)


    def size(self):
        """
        size(Configuration self) -> size_t

        Parameters
        ----------
        self: Configuration const *

        """
        return _MMCorePy.Configuration_size(self)


    def getVerbose(self):
        """
        getVerbose(Configuration self) -> std::string

        Parameters
        ----------
        self: Configuration const *

        """
        return _MMCorePy.Configuration_getVerbose(self)

Configuration_swigregister = _MMCorePy.Configuration_swigregister
Configuration_swigregister(Configuration)

class PropertyBlock(_object):
    """Proxy of C++ PropertyBlock class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PropertyBlock, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PropertyBlock, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(PropertyBlock self) -> PropertyBlock"""
        this = _MMCorePy.new_PropertyBlock()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MMCorePy.delete_PropertyBlock
    __del__ = lambda self: None

    def addPair(self, pair):
        """
        addPair(PropertyBlock self, PropertyPair pair)

        Parameters
        ----------
        pair: PropertyPair const &

        """
        return _MMCorePy.PropertyBlock_addPair(self, pair)


    def getPair(self, index):
        """
        getPair(PropertyBlock self, size_t index) -> PropertyPair

        Parameters
        ----------
        index: size_t

        """
        return _MMCorePy.PropertyBlock_getPair(self, index)


    def size(self):
        """
        size(PropertyBlock self) -> size_t

        Parameters
        ----------
        self: PropertyBlock const *

        """
        return _MMCorePy.PropertyBlock_size(self)


    def getValue(self, key):
        """
        getValue(PropertyBlock self, char const * key) -> std::string

        Parameters
        ----------
        key: char const *

        """
        return _MMCorePy.PropertyBlock_getValue(self, key)

PropertyBlock_swigregister = _MMCorePy.PropertyBlock_swigregister
PropertyBlock_swigregister(PropertyBlock)

class CMMCore(_object):
    """Proxy of C++ CMMCore class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMMCore, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMMCore, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(CMMCore self) -> CMMCore"""
        this = _MMCorePy.new_CMMCore()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MMCorePy.delete_CMMCore
    __del__ = lambda self: None

    def noop():
        """noop()"""
        return _MMCorePy.CMMCore_noop()

    noop = staticmethod(noop)

    def loadDevice(self, label, moduleName, deviceName):
        """
        loadDevice(CMMCore self, char const * label, char const * moduleName, char const * deviceName)

        Parameters
        ----------
        label: char const *
        moduleName: char const *
        deviceName: char const *

        """
        return _MMCorePy.CMMCore_loadDevice(self, label, moduleName, deviceName)


    def unloadDevice(self, label):
        """
        unloadDevice(CMMCore self, char const * label)

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_unloadDevice(self, label)


    def unloadAllDevices(self):
        """
        unloadAllDevices(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_unloadAllDevices(self)


    def initializeAllDevices(self):
        """
        initializeAllDevices(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_initializeAllDevices(self)


    def initializeDevice(self, label):
        """
        initializeDevice(CMMCore self, char const * label)

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_initializeDevice(self, label)


    def reset(self):
        """
        reset(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_reset(self)


    def unloadLibrary(self, moduleName):
        """
        unloadLibrary(CMMCore self, char const * moduleName)

        Parameters
        ----------
        moduleName: char const *

        """
        return _MMCorePy.CMMCore_unloadLibrary(self, moduleName)


    def updateCoreProperties(self):
        """
        updateCoreProperties(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_updateCoreProperties(self)


    def getCoreErrorText(self, code):
        """
        getCoreErrorText(CMMCore self, int code) -> std::string

        Parameters
        ----------
        code: int

        """
        return _MMCorePy.CMMCore_getCoreErrorText(self, code)


    def getVersionInfo(self):
        """
        getVersionInfo(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore const *

        """
        return _MMCorePy.CMMCore_getVersionInfo(self)


    def getAPIVersionInfo(self):
        """
        getAPIVersionInfo(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore const *

        """
        return _MMCorePy.CMMCore_getAPIVersionInfo(self)


    def getSystemState(self):
        """
        getSystemState(CMMCore self) -> Configuration

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getSystemState(self)


    def setSystemState(self, conf):
        """
        setSystemState(CMMCore self, Configuration conf)

        Parameters
        ----------
        conf: Configuration const &

        """
        return _MMCorePy.CMMCore_setSystemState(self, conf)


    def getConfigState(self, group, config):
        """
        getConfigState(CMMCore self, char const * group, char const * config) -> Configuration

        Parameters
        ----------
        group: char const *
        config: char const *

        """
        return _MMCorePy.CMMCore_getConfigState(self, group, config)


    def getConfigGroupState(self, group):
        """
        getConfigGroupState(CMMCore self, char const * group) -> Configuration

        Parameters
        ----------
        group: char const *

        """
        return _MMCorePy.CMMCore_getConfigGroupState(self, group)


    def saveSystemState(self, fileName):
        """
        saveSystemState(CMMCore self, char const * fileName)

        Parameters
        ----------
        fileName: char const *

        """
        return _MMCorePy.CMMCore_saveSystemState(self, fileName)


    def loadSystemState(self, fileName):
        """
        loadSystemState(CMMCore self, char const * fileName)

        Parameters
        ----------
        fileName: char const *

        """
        return _MMCorePy.CMMCore_loadSystemState(self, fileName)


    def saveSystemConfiguration(self, fileName):
        """
        saveSystemConfiguration(CMMCore self, char const * fileName)

        Parameters
        ----------
        fileName: char const *

        """
        return _MMCorePy.CMMCore_saveSystemConfiguration(self, fileName)


    def loadSystemConfiguration(self, fileName):
        """
        loadSystemConfiguration(CMMCore self, char const * fileName)

        Parameters
        ----------
        fileName: char const *

        """
        return _MMCorePy.CMMCore_loadSystemConfiguration(self, fileName)


    def registerCallback(self, cb):
        """
        registerCallback(CMMCore self, MMEventCallback cb)

        Parameters
        ----------
        cb: MMEventCallback *

        """
        return _MMCorePy.CMMCore_registerCallback(self, cb)


    def setPrimaryLogFile(self, filename, truncate=False):
        """
        setPrimaryLogFile(CMMCore self, char const * filename, bool truncate=False)

        Parameters
        ----------
        filename: char const *
        truncate: bool

        setPrimaryLogFile(CMMCore self, char const * filename)

        Parameters
        ----------
        filename: char const *

        """
        return _MMCorePy.CMMCore_setPrimaryLogFile(self, filename, truncate)


    def getPrimaryLogFile(self):
        """
        getPrimaryLogFile(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore const *

        """
        return _MMCorePy.CMMCore_getPrimaryLogFile(self)


    def logMessage(self, *args):
        """
        logMessage(CMMCore self, char const * msg)

        Parameters
        ----------
        msg: char const *

        logMessage(CMMCore self, char const * msg, bool debugOnly)

        Parameters
        ----------
        msg: char const *
        debugOnly: bool

        """
        return _MMCorePy.CMMCore_logMessage(self, *args)


    def enableDebugLog(self, enable):
        """
        enableDebugLog(CMMCore self, bool enable)

        Parameters
        ----------
        enable: bool

        """
        return _MMCorePy.CMMCore_enableDebugLog(self, enable)


    def debugLogEnabled(self):
        """
        debugLogEnabled(CMMCore self) -> bool

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_debugLogEnabled(self)


    def enableStderrLog(self, enable):
        """
        enableStderrLog(CMMCore self, bool enable)

        Parameters
        ----------
        enable: bool

        """
        return _MMCorePy.CMMCore_enableStderrLog(self, enable)


    def stderrLogEnabled(self):
        """
        stderrLogEnabled(CMMCore self) -> bool

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_stderrLogEnabled(self)


    def startSecondaryLogFile(self, filename, enableDebug, truncate=True, synchronous=False):
        """
        startSecondaryLogFile(CMMCore self, char const * filename, bool enableDebug, bool truncate=True, bool synchronous=False) -> int

        Parameters
        ----------
        filename: char const *
        enableDebug: bool
        truncate: bool
        synchronous: bool

        startSecondaryLogFile(CMMCore self, char const * filename, bool enableDebug, bool truncate=True) -> int

        Parameters
        ----------
        filename: char const *
        enableDebug: bool
        truncate: bool

        startSecondaryLogFile(CMMCore self, char const * filename, bool enableDebug) -> int

        Parameters
        ----------
        filename: char const *
        enableDebug: bool

        """
        return _MMCorePy.CMMCore_startSecondaryLogFile(self, filename, enableDebug, truncate, synchronous)


    def stopSecondaryLogFile(self, handle):
        """
        stopSecondaryLogFile(CMMCore self, int handle)

        Parameters
        ----------
        handle: int

        """
        return _MMCorePy.CMMCore_stopSecondaryLogFile(self, handle)


    def getDeviceAdapterSearchPaths(self):
        """
        getDeviceAdapterSearchPaths(CMMCore self) -> StrVector

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getDeviceAdapterSearchPaths(self)


    def setDeviceAdapterSearchPaths(self, paths):
        """
        setDeviceAdapterSearchPaths(CMMCore self, StrVector paths)

        Parameters
        ----------
        paths: std::vector< std::string,std::allocator< std::string > > const &

        """
        return _MMCorePy.CMMCore_setDeviceAdapterSearchPaths(self, paths)


    def addSearchPath(path):
        """
        addSearchPath(char const * path)

        Parameters
        ----------
        path: char const *

        """
        return _MMCorePy.CMMCore_addSearchPath(path)

    addSearchPath = staticmethod(addSearchPath)

    def getDeviceAdapterNames(self):
        """
        getDeviceAdapterNames(CMMCore self) -> StrVector

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getDeviceAdapterNames(self)


    def getDeviceLibraries():
        """getDeviceLibraries() -> StrVector"""
        return _MMCorePy.CMMCore_getDeviceLibraries()

    getDeviceLibraries = staticmethod(getDeviceLibraries)

    def getAvailableDevices(self, library):
        """
        getAvailableDevices(CMMCore self, char const * library) -> StrVector

        Parameters
        ----------
        library: char const *

        """
        return _MMCorePy.CMMCore_getAvailableDevices(self, library)


    def getAvailableDeviceDescriptions(self, library):
        """
        getAvailableDeviceDescriptions(CMMCore self, char const * library) -> StrVector

        Parameters
        ----------
        library: char const *

        """
        return _MMCorePy.CMMCore_getAvailableDeviceDescriptions(self, library)


    def getAvailableDeviceTypes(self, library):
        """
        getAvailableDeviceTypes(CMMCore self, char const * library) -> LongVector

        Parameters
        ----------
        library: char const *

        """
        return _MMCorePy.CMMCore_getAvailableDeviceTypes(self, library)


    def getLoadedDevices(self):
        """
        getLoadedDevices(CMMCore self) -> StrVector

        Parameters
        ----------
        self: CMMCore const *

        """
        return _MMCorePy.CMMCore_getLoadedDevices(self)


    def getLoadedDevicesOfType(self, devType):
        """
        getLoadedDevicesOfType(CMMCore self, MM::DeviceType devType) -> StrVector

        Parameters
        ----------
        devType: enum MM::DeviceType

        """
        return _MMCorePy.CMMCore_getLoadedDevicesOfType(self, devType)


    def getDeviceType(self, label):
        """
        getDeviceType(CMMCore self, char const * label) -> MM::DeviceType

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_getDeviceType(self, label)


    def getDeviceLibrary(self, label):
        """
        getDeviceLibrary(CMMCore self, char const * label) -> std::string

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_getDeviceLibrary(self, label)


    def getDeviceName(self, label):
        """
        getDeviceName(CMMCore self, char const * label) -> std::string

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_getDeviceName(self, label)


    def getDeviceDescription(self, label):
        """
        getDeviceDescription(CMMCore self, char const * label) -> std::string

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_getDeviceDescription(self, label)


    def getDevicePropertyNames(self, label):
        """
        getDevicePropertyNames(CMMCore self, char const * label) -> StrVector

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_getDevicePropertyNames(self, label)


    def hasProperty(self, label, propName):
        """
        hasProperty(CMMCore self, char const * label, char const * propName) -> bool

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_hasProperty(self, label, propName)


    def getProperty(self, label, propName):
        """
        getProperty(CMMCore self, char const * label, char const * propName) -> std::string

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_getProperty(self, label, propName)


    def setProperty(self, *args):
        """
        setProperty(CMMCore self, char const * label, char const * propName, char const * propValue)

        Parameters
        ----------
        label: char const *
        propName: char const *
        propValue: char const *

        setProperty(CMMCore self, char const * label, char const * propName, bool const propValue)

        Parameters
        ----------
        label: char const *
        propName: char const *
        propValue: bool const

        setProperty(CMMCore self, char const * label, char const * propName, long const propValue)

        Parameters
        ----------
        label: char const *
        propName: char const *
        propValue: long const

        setProperty(CMMCore self, char const * label, char const * propName, float const propValue)

        Parameters
        ----------
        label: char const *
        propName: char const *
        propValue: float const

        setProperty(CMMCore self, char const * label, char const * propName, double const propValue)

        Parameters
        ----------
        label: char const *
        propName: char const *
        propValue: double const

        """
        return _MMCorePy.CMMCore_setProperty(self, *args)


    def getAllowedPropertyValues(self, label, propName):
        """
        getAllowedPropertyValues(CMMCore self, char const * label, char const * propName) -> StrVector

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_getAllowedPropertyValues(self, label, propName)


    def isPropertyReadOnly(self, label, propName):
        """
        isPropertyReadOnly(CMMCore self, char const * label, char const * propName) -> bool

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_isPropertyReadOnly(self, label, propName)


    def isPropertyPreInit(self, label, propName):
        """
        isPropertyPreInit(CMMCore self, char const * label, char const * propName) -> bool

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_isPropertyPreInit(self, label, propName)


    def isPropertySequenceable(self, label, propName):
        """
        isPropertySequenceable(CMMCore self, char const * label, char const * propName) -> bool

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_isPropertySequenceable(self, label, propName)


    def hasPropertyLimits(self, label, propName):
        """
        hasPropertyLimits(CMMCore self, char const * label, char const * propName) -> bool

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_hasPropertyLimits(self, label, propName)


    def getPropertyLowerLimit(self, label, propName):
        """
        getPropertyLowerLimit(CMMCore self, char const * label, char const * propName) -> double

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_getPropertyLowerLimit(self, label, propName)


    def getPropertyUpperLimit(self, label, propName):
        """
        getPropertyUpperLimit(CMMCore self, char const * label, char const * propName) -> double

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_getPropertyUpperLimit(self, label, propName)


    def getPropertyType(self, label, propName):
        """
        getPropertyType(CMMCore self, char const * label, char const * propName) -> MM::PropertyType

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_getPropertyType(self, label, propName)


    def startPropertySequence(self, label, propName):
        """
        startPropertySequence(CMMCore self, char const * label, char const * propName)

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_startPropertySequence(self, label, propName)


    def stopPropertySequence(self, label, propName):
        """
        stopPropertySequence(CMMCore self, char const * label, char const * propName)

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_stopPropertySequence(self, label, propName)


    def getPropertySequenceMaxLength(self, label, propName):
        """
        getPropertySequenceMaxLength(CMMCore self, char const * label, char const * propName) -> long

        Parameters
        ----------
        label: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_getPropertySequenceMaxLength(self, label, propName)


    def loadPropertySequence(self, label, propName, eventSequence):
        """
        loadPropertySequence(CMMCore self, char const * label, char const * propName, StrVector eventSequence)

        Parameters
        ----------
        label: char const *
        propName: char const *
        eventSequence: std::vector< std::string,std::allocator< std::string > >

        """
        return _MMCorePy.CMMCore_loadPropertySequence(self, label, propName, eventSequence)


    def deviceBusy(self, label):
        """
        deviceBusy(CMMCore self, char const * label) -> bool

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_deviceBusy(self, label)


    def waitForDevice(self, label):
        """
        waitForDevice(CMMCore self, char const * label)

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_waitForDevice(self, label)


    def waitForConfig(self, group, configName):
        """
        waitForConfig(CMMCore self, char const * group, char const * configName)

        Parameters
        ----------
        group: char const *
        configName: char const *

        """
        return _MMCorePy.CMMCore_waitForConfig(self, group, configName)


    def systemBusy(self):
        """
        systemBusy(CMMCore self) -> bool

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_systemBusy(self)


    def waitForSystem(self):
        """
        waitForSystem(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_waitForSystem(self)


    def waitForImageSynchro(self):
        """
        waitForImageSynchro(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_waitForImageSynchro(self)


    def deviceTypeBusy(self, devType):
        """
        deviceTypeBusy(CMMCore self, MM::DeviceType devType) -> bool

        Parameters
        ----------
        devType: enum MM::DeviceType

        """
        return _MMCorePy.CMMCore_deviceTypeBusy(self, devType)


    def waitForDeviceType(self, devType):
        """
        waitForDeviceType(CMMCore self, MM::DeviceType devType)

        Parameters
        ----------
        devType: enum MM::DeviceType

        """
        return _MMCorePy.CMMCore_waitForDeviceType(self, devType)


    def getDeviceDelayMs(self, label):
        """
        getDeviceDelayMs(CMMCore self, char const * label) -> double

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_getDeviceDelayMs(self, label)


    def setDeviceDelayMs(self, label, delayMs):
        """
        setDeviceDelayMs(CMMCore self, char const * label, double delayMs)

        Parameters
        ----------
        label: char const *
        delayMs: double

        """
        return _MMCorePy.CMMCore_setDeviceDelayMs(self, label, delayMs)


    def usesDeviceDelay(self, label):
        """
        usesDeviceDelay(CMMCore self, char const * label) -> bool

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_usesDeviceDelay(self, label)


    def setTimeoutMs(self, timeoutMs):
        """
        setTimeoutMs(CMMCore self, long timeoutMs)

        Parameters
        ----------
        timeoutMs: long

        """
        return _MMCorePy.CMMCore_setTimeoutMs(self, timeoutMs)


    def getTimeoutMs(self):
        """
        getTimeoutMs(CMMCore self) -> long

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getTimeoutMs(self)


    def sleep(self, intervalMs):
        """
        sleep(CMMCore self, double intervalMs)

        Parameters
        ----------
        intervalMs: double

        """
        return _MMCorePy.CMMCore_sleep(self, intervalMs)


    def getCameraDevice(self):
        """
        getCameraDevice(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getCameraDevice(self)


    def getShutterDevice(self):
        """
        getShutterDevice(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getShutterDevice(self)


    def getFocusDevice(self):
        """
        getFocusDevice(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getFocusDevice(self)


    def getXYStageDevice(self):
        """
        getXYStageDevice(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getXYStageDevice(self)


    def getAutoFocusDevice(self):
        """
        getAutoFocusDevice(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getAutoFocusDevice(self)


    def getImageProcessorDevice(self):
        """
        getImageProcessorDevice(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getImageProcessorDevice(self)


    def getSLMDevice(self):
        """
        getSLMDevice(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getSLMDevice(self)


    def getGalvoDevice(self):
        """
        getGalvoDevice(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getGalvoDevice(self)


    def getChannelGroup(self):
        """
        getChannelGroup(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getChannelGroup(self)


    def setCameraDevice(self, cameraLabel):
        """
        setCameraDevice(CMMCore self, char const * cameraLabel)

        Parameters
        ----------
        cameraLabel: char const *

        """
        return _MMCorePy.CMMCore_setCameraDevice(self, cameraLabel)


    def setShutterDevice(self, shutterLabel):
        """
        setShutterDevice(CMMCore self, char const * shutterLabel)

        Parameters
        ----------
        shutterLabel: char const *

        """
        return _MMCorePy.CMMCore_setShutterDevice(self, shutterLabel)


    def setFocusDevice(self, focusLabel):
        """
        setFocusDevice(CMMCore self, char const * focusLabel)

        Parameters
        ----------
        focusLabel: char const *

        """
        return _MMCorePy.CMMCore_setFocusDevice(self, focusLabel)


    def setXYStageDevice(self, xyStageLabel):
        """
        setXYStageDevice(CMMCore self, char const * xyStageLabel)

        Parameters
        ----------
        xyStageLabel: char const *

        """
        return _MMCorePy.CMMCore_setXYStageDevice(self, xyStageLabel)


    def setAutoFocusDevice(self, focusLabel):
        """
        setAutoFocusDevice(CMMCore self, char const * focusLabel)

        Parameters
        ----------
        focusLabel: char const *

        """
        return _MMCorePy.CMMCore_setAutoFocusDevice(self, focusLabel)


    def setImageProcessorDevice(self, procLabel):
        """
        setImageProcessorDevice(CMMCore self, char const * procLabel)

        Parameters
        ----------
        procLabel: char const *

        """
        return _MMCorePy.CMMCore_setImageProcessorDevice(self, procLabel)


    def setSLMDevice(self, slmLabel):
        """
        setSLMDevice(CMMCore self, char const * slmLabel)

        Parameters
        ----------
        slmLabel: char const *

        """
        return _MMCorePy.CMMCore_setSLMDevice(self, slmLabel)


    def setGalvoDevice(self, galvoLabel):
        """
        setGalvoDevice(CMMCore self, char const * galvoLabel)

        Parameters
        ----------
        galvoLabel: char const *

        """
        return _MMCorePy.CMMCore_setGalvoDevice(self, galvoLabel)


    def setChannelGroup(self, channelGroup):
        """
        setChannelGroup(CMMCore self, char const * channelGroup)

        Parameters
        ----------
        channelGroup: char const *

        """
        return _MMCorePy.CMMCore_setChannelGroup(self, channelGroup)


    def getSystemStateCache(self):
        """
        getSystemStateCache(CMMCore self) -> Configuration

        Parameters
        ----------
        self: CMMCore const *

        """
        return _MMCorePy.CMMCore_getSystemStateCache(self)


    def updateSystemStateCache(self):
        """
        updateSystemStateCache(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_updateSystemStateCache(self)


    def getPropertyFromCache(self, deviceLabel, propName):
        """
        getPropertyFromCache(CMMCore self, char const * deviceLabel, char const * propName) -> std::string

        Parameters
        ----------
        deviceLabel: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_getPropertyFromCache(self, deviceLabel, propName)


    def getCurrentConfigFromCache(self, groupName):
        """
        getCurrentConfigFromCache(CMMCore self, char const * groupName) -> std::string

        Parameters
        ----------
        groupName: char const *

        """
        return _MMCorePy.CMMCore_getCurrentConfigFromCache(self, groupName)


    def getConfigGroupStateFromCache(self, group):
        """
        getConfigGroupStateFromCache(CMMCore self, char const * group) -> Configuration

        Parameters
        ----------
        group: char const *

        """
        return _MMCorePy.CMMCore_getConfigGroupStateFromCache(self, group)


    def defineConfig(self, *args):
        """
        defineConfig(CMMCore self, char const * groupName, char const * configName)

        Parameters
        ----------
        groupName: char const *
        configName: char const *

        defineConfig(CMMCore self, char const * groupName, char const * configName, char const * deviceLabel, char const * propName, char const * value)

        Parameters
        ----------
        groupName: char const *
        configName: char const *
        deviceLabel: char const *
        propName: char const *
        value: char const *

        """
        return _MMCorePy.CMMCore_defineConfig(self, *args)


    def defineConfigGroup(self, groupName):
        """
        defineConfigGroup(CMMCore self, char const * groupName)

        Parameters
        ----------
        groupName: char const *

        """
        return _MMCorePy.CMMCore_defineConfigGroup(self, groupName)


    def deleteConfigGroup(self, groupName):
        """
        deleteConfigGroup(CMMCore self, char const * groupName)

        Parameters
        ----------
        groupName: char const *

        """
        return _MMCorePy.CMMCore_deleteConfigGroup(self, groupName)


    def renameConfigGroup(self, oldGroupName, newGroupName):
        """
        renameConfigGroup(CMMCore self, char const * oldGroupName, char const * newGroupName)

        Parameters
        ----------
        oldGroupName: char const *
        newGroupName: char const *

        """
        return _MMCorePy.CMMCore_renameConfigGroup(self, oldGroupName, newGroupName)


    def isGroupDefined(self, groupName):
        """
        isGroupDefined(CMMCore self, char const * groupName) -> bool

        Parameters
        ----------
        groupName: char const *

        """
        return _MMCorePy.CMMCore_isGroupDefined(self, groupName)


    def isConfigDefined(self, groupName, configName):
        """
        isConfigDefined(CMMCore self, char const * groupName, char const * configName) -> bool

        Parameters
        ----------
        groupName: char const *
        configName: char const *

        """
        return _MMCorePy.CMMCore_isConfigDefined(self, groupName, configName)


    def setConfig(self, groupName, configName):
        """
        setConfig(CMMCore self, char const * groupName, char const * configName)

        Parameters
        ----------
        groupName: char const *
        configName: char const *

        """
        return _MMCorePy.CMMCore_setConfig(self, groupName, configName)


    def deleteConfig(self, *args):
        """
        deleteConfig(CMMCore self, char const * groupName, char const * configName)

        Parameters
        ----------
        groupName: char const *
        configName: char const *

        deleteConfig(CMMCore self, char const * groupName, char const * configName, char const * deviceLabel, char const * propName)

        Parameters
        ----------
        groupName: char const *
        configName: char const *
        deviceLabel: char const *
        propName: char const *

        """
        return _MMCorePy.CMMCore_deleteConfig(self, *args)


    def renameConfig(self, groupName, oldConfigName, newConfigName):
        """
        renameConfig(CMMCore self, char const * groupName, char const * oldConfigName, char const * newConfigName)

        Parameters
        ----------
        groupName: char const *
        oldConfigName: char const *
        newConfigName: char const *

        """
        return _MMCorePy.CMMCore_renameConfig(self, groupName, oldConfigName, newConfigName)


    def getAvailableConfigGroups(self):
        """
        getAvailableConfigGroups(CMMCore self) -> StrVector

        Parameters
        ----------
        self: CMMCore const *

        """
        return _MMCorePy.CMMCore_getAvailableConfigGroups(self)


    def getAvailableConfigs(self, configGroup):
        """
        getAvailableConfigs(CMMCore self, char const * configGroup) -> StrVector

        Parameters
        ----------
        configGroup: char const *

        """
        return _MMCorePy.CMMCore_getAvailableConfigs(self, configGroup)


    def getCurrentConfig(self, groupName):
        """
        getCurrentConfig(CMMCore self, char const * groupName) -> std::string

        Parameters
        ----------
        groupName: char const *

        """
        return _MMCorePy.CMMCore_getCurrentConfig(self, groupName)


    def getConfigData(self, configGroup, configName):
        """
        getConfigData(CMMCore self, char const * configGroup, char const * configName) -> Configuration

        Parameters
        ----------
        configGroup: char const *
        configName: char const *

        """
        return _MMCorePy.CMMCore_getConfigData(self, configGroup, configName)


    def getCurrentPixelSizeConfig(self, *args):
        """
        getCurrentPixelSizeConfig(CMMCore self) -> std::string
        getCurrentPixelSizeConfig(CMMCore self, bool cached) -> std::string

        Parameters
        ----------
        cached: bool

        """
        return _MMCorePy.CMMCore_getCurrentPixelSizeConfig(self, *args)


    def getPixelSizeUm(self, *args):
        """
        getPixelSizeUm(CMMCore self) -> double
        getPixelSizeUm(CMMCore self, bool cached) -> double

        Parameters
        ----------
        cached: bool

        """
        return _MMCorePy.CMMCore_getPixelSizeUm(self, *args)


    def getPixelSizeUmByID(self, resolutionID):
        """
        getPixelSizeUmByID(CMMCore self, char const * resolutionID) -> double

        Parameters
        ----------
        resolutionID: char const *

        """
        return _MMCorePy.CMMCore_getPixelSizeUmByID(self, resolutionID)


    def getPixelSizeAffine(self, *args):
        """
        getPixelSizeAffine(CMMCore self) -> DoubleVector
        getPixelSizeAffine(CMMCore self, bool cached) -> DoubleVector

        Parameters
        ----------
        cached: bool

        """
        return _MMCorePy.CMMCore_getPixelSizeAffine(self, *args)


    def getPixelSizeAffineByID(self, resolutionID):
        """
        getPixelSizeAffineByID(CMMCore self, char const * resolutionID) -> DoubleVector

        Parameters
        ----------
        resolutionID: char const *

        """
        return _MMCorePy.CMMCore_getPixelSizeAffineByID(self, resolutionID)


    def getMagnificationFactor(self):
        """
        getMagnificationFactor(CMMCore self) -> double

        Parameters
        ----------
        self: CMMCore const *

        """
        return _MMCorePy.CMMCore_getMagnificationFactor(self)


    def setPixelSizeUm(self, resolutionID, pixSize):
        """
        setPixelSizeUm(CMMCore self, char const * resolutionID, double pixSize)

        Parameters
        ----------
        resolutionID: char const *
        pixSize: double

        """
        return _MMCorePy.CMMCore_setPixelSizeUm(self, resolutionID, pixSize)


    def setPixelSizeAffine(self, resolutionID, affine):
        """
        setPixelSizeAffine(CMMCore self, char const * resolutionID, DoubleVector affine)

        Parameters
        ----------
        resolutionID: char const *
        affine: std::vector< double,std::allocator< double > >

        """
        return _MMCorePy.CMMCore_setPixelSizeAffine(self, resolutionID, affine)


    def definePixelSizeConfig(self, *args):
        """
        definePixelSizeConfig(CMMCore self, char const * resolutionID, char const * deviceLabel, char const * propName, char const * value)

        Parameters
        ----------
        resolutionID: char const *
        deviceLabel: char const *
        propName: char const *
        value: char const *

        definePixelSizeConfig(CMMCore self, char const * resolutionID)

        Parameters
        ----------
        resolutionID: char const *

        """
        return _MMCorePy.CMMCore_definePixelSizeConfig(self, *args)


    def getAvailablePixelSizeConfigs(self):
        """
        getAvailablePixelSizeConfigs(CMMCore self) -> StrVector

        Parameters
        ----------
        self: CMMCore const *

        """
        return _MMCorePy.CMMCore_getAvailablePixelSizeConfigs(self)


    def isPixelSizeConfigDefined(self, resolutionID):
        """
        isPixelSizeConfigDefined(CMMCore self, char const * resolutionID) -> bool

        Parameters
        ----------
        resolutionID: char const *

        """
        return _MMCorePy.CMMCore_isPixelSizeConfigDefined(self, resolutionID)


    def setPixelSizeConfig(self, resolutionID):
        """
        setPixelSizeConfig(CMMCore self, char const * resolutionID)

        Parameters
        ----------
        resolutionID: char const *

        """
        return _MMCorePy.CMMCore_setPixelSizeConfig(self, resolutionID)


    def renamePixelSizeConfig(self, oldConfigName, newConfigName):
        """
        renamePixelSizeConfig(CMMCore self, char const * oldConfigName, char const * newConfigName)

        Parameters
        ----------
        oldConfigName: char const *
        newConfigName: char const *

        """
        return _MMCorePy.CMMCore_renamePixelSizeConfig(self, oldConfigName, newConfigName)


    def deletePixelSizeConfig(self, configName):
        """
        deletePixelSizeConfig(CMMCore self, char const * configName)

        Parameters
        ----------
        configName: char const *

        """
        return _MMCorePy.CMMCore_deletePixelSizeConfig(self, configName)


    def getPixelSizeConfigData(self, configName):
        """
        getPixelSizeConfigData(CMMCore self, char const * configName) -> Configuration

        Parameters
        ----------
        configName: char const *

        """
        return _MMCorePy.CMMCore_getPixelSizeConfigData(self, configName)


    def definePropertyBlock(self, blockName, propertyName, propertyValue):
        """
        definePropertyBlock(CMMCore self, char const * blockName, char const * propertyName, char const * propertyValue)

        Parameters
        ----------
        blockName: char const *
        propertyName: char const *
        propertyValue: char const *

        """
        return _MMCorePy.CMMCore_definePropertyBlock(self, blockName, propertyName, propertyValue)


    def getAvailablePropertyBlocks(self):
        """
        getAvailablePropertyBlocks(CMMCore self) -> StrVector

        Parameters
        ----------
        self: CMMCore const *

        """
        return _MMCorePy.CMMCore_getAvailablePropertyBlocks(self)


    def getPropertyBlockData(self, blockName):
        """
        getPropertyBlockData(CMMCore self, char const * blockName) -> PropertyBlock

        Parameters
        ----------
        blockName: char const *

        """
        return _MMCorePy.CMMCore_getPropertyBlockData(self, blockName)


    def setROI(self, *args):
        """
        setROI(CMMCore self, int x, int y, int xSize, int ySize)

        Parameters
        ----------
        x: int
        y: int
        xSize: int
        ySize: int

        setROI(CMMCore self, char const * label, int x, int y, int xSize, int ySize)

        Parameters
        ----------
        label: char const *
        x: int
        y: int
        xSize: int
        ySize: int

        """
        return _MMCorePy.CMMCore_setROI(self, *args)


    def getROI(self, *args):
        """
        getROI(CMMCore self)
        getROI(CMMCore self, char const * label)

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_getROI(self, *args)


    def clearROI(self):
        """
        clearROI(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_clearROI(self)


    def isMultiROISupported(self):
        """
        isMultiROISupported(CMMCore self) -> bool

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_isMultiROISupported(self)


    def isMultiROIEnabled(self):
        """
        isMultiROIEnabled(CMMCore self) -> bool

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_isMultiROIEnabled(self)


    def setMultiROI(self, xs, ys, widths, heights):
        """
        setMultiROI(CMMCore self, std::vector< unsigned int,std::allocator< unsigned int > > xs, std::vector< unsigned int,std::allocator< unsigned int > > ys, std::vector< unsigned int,std::allocator< unsigned int > > widths, std::vector< unsigned int,std::allocator< unsigned int > > heights)

        Parameters
        ----------
        xs: std::vector< unsigned int,std::allocator< unsigned int > >
        ys: std::vector< unsigned int,std::allocator< unsigned int > >
        widths: std::vector< unsigned int,std::allocator< unsigned int > >
        heights: std::vector< unsigned int,std::allocator< unsigned int > >

        """
        return _MMCorePy.CMMCore_setMultiROI(self, xs, ys, widths, heights)


    def getMultiROI(self, xs, ys, widths, heights):
        """
        getMultiROI(CMMCore self, std::vector< unsigned int,std::allocator< unsigned int > > & xs, std::vector< unsigned int,std::allocator< unsigned int > > & ys, std::vector< unsigned int,std::allocator< unsigned int > > & widths, std::vector< unsigned int,std::allocator< unsigned int > > & heights)

        Parameters
        ----------
        xs: std::vector< unsigned int,std::allocator< unsigned int > > &
        ys: std::vector< unsigned int,std::allocator< unsigned int > > &
        widths: std::vector< unsigned int,std::allocator< unsigned int > > &
        heights: std::vector< unsigned int,std::allocator< unsigned int > > &

        """
        return _MMCorePy.CMMCore_getMultiROI(self, xs, ys, widths, heights)


    def setExposure(self, *args):
        """
        setExposure(CMMCore self, double exp)

        Parameters
        ----------
        exp: double

        setExposure(CMMCore self, char const * cameraLabel, double dExp)

        Parameters
        ----------
        cameraLabel: char const *
        dExp: double

        """
        return _MMCorePy.CMMCore_setExposure(self, *args)


    def getExposure(self, *args):
        """
        getExposure(CMMCore self) -> double
        getExposure(CMMCore self, char const * label) -> double

        Parameters
        ----------
        label: char const *

        """
        return _MMCorePy.CMMCore_getExposure(self, *args)


    def snapImage(self):
        """
        snapImage(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_snapImage(self)


    def getImage(self, *args):
        """
        getImage(CMMCore self)
        getImage(CMMCore self, unsigned int numChannel) -> void *

        Parameters
        ----------
        numChannel: unsigned int

        """
        return _MMCorePy.CMMCore_getImage(self, *args)


    def getImageWidth(self):
        """
        getImageWidth(CMMCore self) -> unsigned int

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getImageWidth(self)


    def getImageHeight(self):
        """
        getImageHeight(CMMCore self) -> unsigned int

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getImageHeight(self)


    def getBytesPerPixel(self):
        """
        getBytesPerPixel(CMMCore self) -> unsigned int

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getBytesPerPixel(self)


    def getImageBitDepth(self):
        """
        getImageBitDepth(CMMCore self) -> unsigned int

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getImageBitDepth(self)


    def getNumberOfComponents(self):
        """
        getNumberOfComponents(CMMCore self) -> unsigned int

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getNumberOfComponents(self)


    def getNumberOfCameraChannels(self):
        """
        getNumberOfCameraChannels(CMMCore self) -> unsigned int

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getNumberOfCameraChannels(self)


    def getCameraChannelName(self, channelNr):
        """
        getCameraChannelName(CMMCore self, unsigned int channelNr) -> std::string

        Parameters
        ----------
        channelNr: unsigned int

        """
        return _MMCorePy.CMMCore_getCameraChannelName(self, channelNr)


    def getImageBufferSize(self):
        """
        getImageBufferSize(CMMCore self) -> long

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getImageBufferSize(self)


    def assignImageSynchro(self, deviceLabel):
        """
        assignImageSynchro(CMMCore self, char const * deviceLabel)

        Parameters
        ----------
        deviceLabel: char const *

        """
        return _MMCorePy.CMMCore_assignImageSynchro(self, deviceLabel)


    def removeImageSynchro(self, deviceLabel):
        """
        removeImageSynchro(CMMCore self, char const * deviceLabel)

        Parameters
        ----------
        deviceLabel: char const *

        """
        return _MMCorePy.CMMCore_removeImageSynchro(self, deviceLabel)


    def removeImageSynchroAll(self):
        """
        removeImageSynchroAll(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_removeImageSynchroAll(self)


    def setAutoShutter(self, state):
        """
        setAutoShutter(CMMCore self, bool state)

        Parameters
        ----------
        state: bool

        """
        return _MMCorePy.CMMCore_setAutoShutter(self, state)


    def getAutoShutter(self):
        """
        getAutoShutter(CMMCore self) -> bool

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getAutoShutter(self)


    def setShutterOpen(self, *args):
        """
        setShutterOpen(CMMCore self, bool state)

        Parameters
        ----------
        state: bool

        setShutterOpen(CMMCore self, char const * shutterLabel, bool state)

        Parameters
        ----------
        shutterLabel: char const *
        state: bool

        """
        return _MMCorePy.CMMCore_setShutterOpen(self, *args)


    def getShutterOpen(self, *args):
        """
        getShutterOpen(CMMCore self) -> bool
        getShutterOpen(CMMCore self, char const * shutterLabel) -> bool

        Parameters
        ----------
        shutterLabel: char const *

        """
        return _MMCorePy.CMMCore_getShutterOpen(self, *args)


    def startSequenceAcquisition(self, *args):
        """
        startSequenceAcquisition(CMMCore self, long numImages, double intervalMs, bool stopOnOverflow)

        Parameters
        ----------
        numImages: long
        intervalMs: double
        stopOnOverflow: bool

        startSequenceAcquisition(CMMCore self, char const * cameraLabel, long numImages, double intervalMs, bool stopOnOverflow)

        Parameters
        ----------
        cameraLabel: char const *
        numImages: long
        intervalMs: double
        stopOnOverflow: bool

        """
        return _MMCorePy.CMMCore_startSequenceAcquisition(self, *args)


    def prepareSequenceAcquisition(self, cameraLabel):
        """
        prepareSequenceAcquisition(CMMCore self, char const * cameraLabel)

        Parameters
        ----------
        cameraLabel: char const *

        """
        return _MMCorePy.CMMCore_prepareSequenceAcquisition(self, cameraLabel)


    def startContinuousSequenceAcquisition(self, intervalMs):
        """
        startContinuousSequenceAcquisition(CMMCore self, double intervalMs)

        Parameters
        ----------
        intervalMs: double

        """
        return _MMCorePy.CMMCore_startContinuousSequenceAcquisition(self, intervalMs)


    def stopSequenceAcquisition(self, *args):
        """
        stopSequenceAcquisition(CMMCore self)
        stopSequenceAcquisition(CMMCore self, char const * cameraLabel)

        Parameters
        ----------
        cameraLabel: char const *

        """
        return _MMCorePy.CMMCore_stopSequenceAcquisition(self, *args)


    def isSequenceRunning(self, *args):
        """
        isSequenceRunning(CMMCore self) -> bool
        isSequenceRunning(CMMCore self, char const * cameraLabel) -> bool

        Parameters
        ----------
        cameraLabel: char const *

        """
        return _MMCorePy.CMMCore_isSequenceRunning(self, *args)


    def getLastImage(self):
        """
        getLastImage(CMMCore self) -> void *

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getLastImage(self)


    def popNextImage(self):
        """
        popNextImage(CMMCore self) -> void *

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_popNextImage(self)


    def getLastImageMD(self, *args):
        """
        getLastImageMD(CMMCore self, unsigned int channel, unsigned int slice, Metadata md)

        Parameters
        ----------
        channel: unsigned int
        slice: unsigned int
        md: Metadata &

        getLastImageMD(CMMCore self, Metadata md) -> void *

        Parameters
        ----------
        md: Metadata &

        """
        return _MMCorePy.CMMCore_getLastImageMD(self, *args)


    def getNBeforeLastImageMD(self, n, md):
        """
        getNBeforeLastImageMD(CMMCore self, unsigned long n, Metadata md) -> void *

        Parameters
        ----------
        n: unsigned long
        md: Metadata &

        """
        return _MMCorePy.CMMCore_getNBeforeLastImageMD(self, n, md)


    def popNextImageMD(self, *args):
        """
        popNextImageMD(CMMCore self, unsigned int channel, unsigned int slice, Metadata md)

        Parameters
        ----------
        channel: unsigned int
        slice: unsigned int
        md: Metadata &

        popNextImageMD(CMMCore self, Metadata md) -> void *

        Parameters
        ----------
        md: Metadata &

        """
        return _MMCorePy.CMMCore_popNextImageMD(self, *args)


    def getRemainingImageCount(self):
        """
        getRemainingImageCount(CMMCore self) -> long

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getRemainingImageCount(self)


    def getBufferTotalCapacity(self):
        """
        getBufferTotalCapacity(CMMCore self) -> long

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getBufferTotalCapacity(self)


    def getBufferFreeCapacity(self):
        """
        getBufferFreeCapacity(CMMCore self) -> long

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getBufferFreeCapacity(self)


    def isBufferOverflowed(self):
        """
        isBufferOverflowed(CMMCore self) -> bool

        Parameters
        ----------
        self: CMMCore const *

        """
        return _MMCorePy.CMMCore_isBufferOverflowed(self)


    def setCircularBufferMemoryFootprint(self, sizeMB):
        """
        setCircularBufferMemoryFootprint(CMMCore self, unsigned int sizeMB)

        Parameters
        ----------
        sizeMB: unsigned int

        """
        return _MMCorePy.CMMCore_setCircularBufferMemoryFootprint(self, sizeMB)


    def getCircularBufferMemoryFootprint(self):
        """
        getCircularBufferMemoryFootprint(CMMCore self) -> unsigned int

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getCircularBufferMemoryFootprint(self)


    def initializeCircularBuffer(self):
        """
        initializeCircularBuffer(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_initializeCircularBuffer(self)


    def clearCircularBuffer(self):
        """
        clearCircularBuffer(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_clearCircularBuffer(self)


    def isExposureSequenceable(self, cameraLabel):
        """
        isExposureSequenceable(CMMCore self, char const * cameraLabel) -> bool

        Parameters
        ----------
        cameraLabel: char const *

        """
        return _MMCorePy.CMMCore_isExposureSequenceable(self, cameraLabel)


    def startExposureSequence(self, cameraLabel):
        """
        startExposureSequence(CMMCore self, char const * cameraLabel)

        Parameters
        ----------
        cameraLabel: char const *

        """
        return _MMCorePy.CMMCore_startExposureSequence(self, cameraLabel)


    def stopExposureSequence(self, cameraLabel):
        """
        stopExposureSequence(CMMCore self, char const * cameraLabel)

        Parameters
        ----------
        cameraLabel: char const *

        """
        return _MMCorePy.CMMCore_stopExposureSequence(self, cameraLabel)


    def getExposureSequenceMaxLength(self, cameraLabel):
        """
        getExposureSequenceMaxLength(CMMCore self, char const * cameraLabel) -> long

        Parameters
        ----------
        cameraLabel: char const *

        """
        return _MMCorePy.CMMCore_getExposureSequenceMaxLength(self, cameraLabel)


    def loadExposureSequence(self, cameraLabel, exposureSequence_ms):
        """
        loadExposureSequence(CMMCore self, char const * cameraLabel, DoubleVector exposureSequence_ms)

        Parameters
        ----------
        cameraLabel: char const *
        exposureSequence_ms: std::vector< double,std::allocator< double > >

        """
        return _MMCorePy.CMMCore_loadExposureSequence(self, cameraLabel, exposureSequence_ms)


    def getLastFocusScore(self):
        """
        getLastFocusScore(CMMCore self) -> double

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getLastFocusScore(self)


    def getCurrentFocusScore(self):
        """
        getCurrentFocusScore(CMMCore self) -> double

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getCurrentFocusScore(self)


    def enableContinuousFocus(self, enable):
        """
        enableContinuousFocus(CMMCore self, bool enable)

        Parameters
        ----------
        enable: bool

        """
        return _MMCorePy.CMMCore_enableContinuousFocus(self, enable)


    def isContinuousFocusEnabled(self):
        """
        isContinuousFocusEnabled(CMMCore self) -> bool

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_isContinuousFocusEnabled(self)


    def isContinuousFocusLocked(self):
        """
        isContinuousFocusLocked(CMMCore self) -> bool

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_isContinuousFocusLocked(self)


    def isContinuousFocusDrive(self, stageLabel):
        """
        isContinuousFocusDrive(CMMCore self, char const * stageLabel) -> bool

        Parameters
        ----------
        stageLabel: char const *

        """
        return _MMCorePy.CMMCore_isContinuousFocusDrive(self, stageLabel)


    def fullFocus(self):
        """
        fullFocus(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_fullFocus(self)


    def incrementalFocus(self):
        """
        incrementalFocus(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_incrementalFocus(self)


    def setAutoFocusOffset(self, offset):
        """
        setAutoFocusOffset(CMMCore self, double offset)

        Parameters
        ----------
        offset: double

        """
        return _MMCorePy.CMMCore_setAutoFocusOffset(self, offset)


    def getAutoFocusOffset(self):
        """
        getAutoFocusOffset(CMMCore self) -> double

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getAutoFocusOffset(self)


    def setState(self, stateDeviceLabel, state):
        """
        setState(CMMCore self, char const * stateDeviceLabel, long state)

        Parameters
        ----------
        stateDeviceLabel: char const *
        state: long

        """
        return _MMCorePy.CMMCore_setState(self, stateDeviceLabel, state)


    def getState(self, stateDeviceLabel):
        """
        getState(CMMCore self, char const * stateDeviceLabel) -> long

        Parameters
        ----------
        stateDeviceLabel: char const *

        """
        return _MMCorePy.CMMCore_getState(self, stateDeviceLabel)


    def getNumberOfStates(self, stateDeviceLabel):
        """
        getNumberOfStates(CMMCore self, char const * stateDeviceLabel) -> long

        Parameters
        ----------
        stateDeviceLabel: char const *

        """
        return _MMCorePy.CMMCore_getNumberOfStates(self, stateDeviceLabel)


    def setStateLabel(self, stateDeviceLabel, stateLabel):
        """
        setStateLabel(CMMCore self, char const * stateDeviceLabel, char const * stateLabel)

        Parameters
        ----------
        stateDeviceLabel: char const *
        stateLabel: char const *

        """
        return _MMCorePy.CMMCore_setStateLabel(self, stateDeviceLabel, stateLabel)


    def getStateLabel(self, stateDeviceLabel):
        """
        getStateLabel(CMMCore self, char const * stateDeviceLabel) -> std::string

        Parameters
        ----------
        stateDeviceLabel: char const *

        """
        return _MMCorePy.CMMCore_getStateLabel(self, stateDeviceLabel)


    def defineStateLabel(self, stateDeviceLabel, state, stateLabel):
        """
        defineStateLabel(CMMCore self, char const * stateDeviceLabel, long state, char const * stateLabel)

        Parameters
        ----------
        stateDeviceLabel: char const *
        state: long
        stateLabel: char const *

        """
        return _MMCorePy.CMMCore_defineStateLabel(self, stateDeviceLabel, state, stateLabel)


    def getStateLabels(self, stateDeviceLabel):
        """
        getStateLabels(CMMCore self, char const * stateDeviceLabel) -> StrVector

        Parameters
        ----------
        stateDeviceLabel: char const *

        """
        return _MMCorePy.CMMCore_getStateLabels(self, stateDeviceLabel)


    def getStateFromLabel(self, stateDeviceLabel, stateLabel):
        """
        getStateFromLabel(CMMCore self, char const * stateDeviceLabel, char const * stateLabel) -> long

        Parameters
        ----------
        stateDeviceLabel: char const *
        stateLabel: char const *

        """
        return _MMCorePy.CMMCore_getStateFromLabel(self, stateDeviceLabel, stateLabel)


    def getStateLabelData(self, stateDeviceLabel, stateLabel):
        """
        getStateLabelData(CMMCore self, char const * stateDeviceLabel, char const * stateLabel) -> PropertyBlock

        Parameters
        ----------
        stateDeviceLabel: char const *
        stateLabel: char const *

        """
        return _MMCorePy.CMMCore_getStateLabelData(self, stateDeviceLabel, stateLabel)


    def getData(self, stateDeviceLabel):
        """
        getData(CMMCore self, char const * stateDeviceLabel) -> PropertyBlock

        Parameters
        ----------
        stateDeviceLabel: char const *

        """
        return _MMCorePy.CMMCore_getData(self, stateDeviceLabel)


    def setPosition(self, *args):
        """
        setPosition(CMMCore self, char const * stageLabel, double position)

        Parameters
        ----------
        stageLabel: char const *
        position: double

        setPosition(CMMCore self, double position)

        Parameters
        ----------
        position: double

        """
        return _MMCorePy.CMMCore_setPosition(self, *args)


    def getPosition(self, *args):
        """
        getPosition(CMMCore self, char const * stageLabel) -> double

        Parameters
        ----------
        stageLabel: char const *

        getPosition(CMMCore self) -> double

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getPosition(self, *args)


    def setRelativePosition(self, *args):
        """
        setRelativePosition(CMMCore self, char const * stageLabel, double d)

        Parameters
        ----------
        stageLabel: char const *
        d: double

        setRelativePosition(CMMCore self, double d)

        Parameters
        ----------
        d: double

        """
        return _MMCorePy.CMMCore_setRelativePosition(self, *args)


    def setOrigin(self, *args):
        """
        setOrigin(CMMCore self, char const * stageLabel)

        Parameters
        ----------
        stageLabel: char const *

        setOrigin(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_setOrigin(self, *args)


    def setAdapterOrigin(self, *args):
        """
        setAdapterOrigin(CMMCore self, char const * stageLabel, double newZUm)

        Parameters
        ----------
        stageLabel: char const *
        newZUm: double

        setAdapterOrigin(CMMCore self, double newZUm)

        Parameters
        ----------
        newZUm: double

        """
        return _MMCorePy.CMMCore_setAdapterOrigin(self, *args)


    def setFocusDirection(self, stageLabel, sign):
        """
        setFocusDirection(CMMCore self, char const * stageLabel, int sign)

        Parameters
        ----------
        stageLabel: char const *
        sign: int

        """
        return _MMCorePy.CMMCore_setFocusDirection(self, stageLabel, sign)


    def getFocusDirection(self, stageLabel):
        """
        getFocusDirection(CMMCore self, char const * stageLabel) -> int

        Parameters
        ----------
        stageLabel: char const *

        """
        return _MMCorePy.CMMCore_getFocusDirection(self, stageLabel)


    def isStageSequenceable(self, stageLabel):
        """
        isStageSequenceable(CMMCore self, char const * stageLabel) -> bool

        Parameters
        ----------
        stageLabel: char const *

        """
        return _MMCorePy.CMMCore_isStageSequenceable(self, stageLabel)


    def isStageLinearSequenceable(self, stageLabel):
        """
        isStageLinearSequenceable(CMMCore self, char const * stageLabel) -> bool

        Parameters
        ----------
        stageLabel: char const *

        """
        return _MMCorePy.CMMCore_isStageLinearSequenceable(self, stageLabel)


    def startStageSequence(self, stageLabel):
        """
        startStageSequence(CMMCore self, char const * stageLabel)

        Parameters
        ----------
        stageLabel: char const *

        """
        return _MMCorePy.CMMCore_startStageSequence(self, stageLabel)


    def stopStageSequence(self, stageLabel):
        """
        stopStageSequence(CMMCore self, char const * stageLabel)

        Parameters
        ----------
        stageLabel: char const *

        """
        return _MMCorePy.CMMCore_stopStageSequence(self, stageLabel)


    def getStageSequenceMaxLength(self, stageLabel):
        """
        getStageSequenceMaxLength(CMMCore self, char const * stageLabel) -> long

        Parameters
        ----------
        stageLabel: char const *

        """
        return _MMCorePy.CMMCore_getStageSequenceMaxLength(self, stageLabel)


    def loadStageSequence(self, stageLabel, positionSequence):
        """
        loadStageSequence(CMMCore self, char const * stageLabel, DoubleVector positionSequence)

        Parameters
        ----------
        stageLabel: char const *
        positionSequence: std::vector< double,std::allocator< double > >

        """
        return _MMCorePy.CMMCore_loadStageSequence(self, stageLabel, positionSequence)


    def setStageLinearSequence(self, stageLabel, dZ_um, nSlices):
        """
        setStageLinearSequence(CMMCore self, char const * stageLabel, double dZ_um, int nSlices)

        Parameters
        ----------
        stageLabel: char const *
        dZ_um: double
        nSlices: int

        """
        return _MMCorePy.CMMCore_setStageLinearSequence(self, stageLabel, dZ_um, nSlices)


    def setXYPosition(self, *args):
        """
        setXYPosition(CMMCore self, char const * xyStageLabel, double x, double y)

        Parameters
        ----------
        xyStageLabel: char const *
        x: double
        y: double

        setXYPosition(CMMCore self, double x, double y)

        Parameters
        ----------
        x: double
        y: double

        """
        return _MMCorePy.CMMCore_setXYPosition(self, *args)


    def setRelativeXYPosition(self, *args):
        """
        setRelativeXYPosition(CMMCore self, char const * xyStageLabel, double dx, double dy)

        Parameters
        ----------
        xyStageLabel: char const *
        dx: double
        dy: double

        setRelativeXYPosition(CMMCore self, double dx, double dy)

        Parameters
        ----------
        dx: double
        dy: double

        """
        return _MMCorePy.CMMCore_setRelativeXYPosition(self, *args)


    def getXYPosition(self, *args):
        """
        getXYPosition(CMMCore self, char const * xyStageLabel)

        Parameters
        ----------
        xyStageLabel: char const *

        getXYPosition(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getXYPosition(self, *args)


    def getXPosition(self, *args):
        """
        getXPosition(CMMCore self, char const * xyStageLabel) -> double

        Parameters
        ----------
        xyStageLabel: char const *

        getXPosition(CMMCore self) -> double

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getXPosition(self, *args)


    def getYPosition(self, *args):
        """
        getYPosition(CMMCore self, char const * xyStageLabel) -> double

        Parameters
        ----------
        xyStageLabel: char const *

        getYPosition(CMMCore self) -> double

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getYPosition(self, *args)


    def stop(self, xyOrZStageLabel):
        """
        stop(CMMCore self, char const * xyOrZStageLabel)

        Parameters
        ----------
        xyOrZStageLabel: char const *

        """
        return _MMCorePy.CMMCore_stop(self, xyOrZStageLabel)


    def home(self, xyOrZStageLabel):
        """
        home(CMMCore self, char const * xyOrZStageLabel)

        Parameters
        ----------
        xyOrZStageLabel: char const *

        """
        return _MMCorePy.CMMCore_home(self, xyOrZStageLabel)


    def setOriginXY(self, *args):
        """
        setOriginXY(CMMCore self, char const * xyStageLabel)

        Parameters
        ----------
        xyStageLabel: char const *

        setOriginXY(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_setOriginXY(self, *args)


    def setOriginX(self, *args):
        """
        setOriginX(CMMCore self, char const * xyStageLabel)

        Parameters
        ----------
        xyStageLabel: char const *

        setOriginX(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_setOriginX(self, *args)


    def setOriginY(self, *args):
        """
        setOriginY(CMMCore self, char const * xyStageLabel)

        Parameters
        ----------
        xyStageLabel: char const *

        setOriginY(CMMCore self)

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_setOriginY(self, *args)


    def setAdapterOriginXY(self, *args):
        """
        setAdapterOriginXY(CMMCore self, char const * xyStageLabel, double newXUm, double newYUm)

        Parameters
        ----------
        xyStageLabel: char const *
        newXUm: double
        newYUm: double

        setAdapterOriginXY(CMMCore self, double newXUm, double newYUm)

        Parameters
        ----------
        newXUm: double
        newYUm: double

        """
        return _MMCorePy.CMMCore_setAdapterOriginXY(self, *args)


    def isXYStageSequenceable(self, xyStageLabel):
        """
        isXYStageSequenceable(CMMCore self, char const * xyStageLabel) -> bool

        Parameters
        ----------
        xyStageLabel: char const *

        """
        return _MMCorePy.CMMCore_isXYStageSequenceable(self, xyStageLabel)


    def startXYStageSequence(self, xyStageLabel):
        """
        startXYStageSequence(CMMCore self, char const * xyStageLabel)

        Parameters
        ----------
        xyStageLabel: char const *

        """
        return _MMCorePy.CMMCore_startXYStageSequence(self, xyStageLabel)


    def stopXYStageSequence(self, xyStageLabel):
        """
        stopXYStageSequence(CMMCore self, char const * xyStageLabel)

        Parameters
        ----------
        xyStageLabel: char const *

        """
        return _MMCorePy.CMMCore_stopXYStageSequence(self, xyStageLabel)


    def getXYStageSequenceMaxLength(self, xyStageLabel):
        """
        getXYStageSequenceMaxLength(CMMCore self, char const * xyStageLabel) -> long

        Parameters
        ----------
        xyStageLabel: char const *

        """
        return _MMCorePy.CMMCore_getXYStageSequenceMaxLength(self, xyStageLabel)


    def loadXYStageSequence(self, xyStageLabel, xSequence, ySequence):
        """
        loadXYStageSequence(CMMCore self, char const * xyStageLabel, DoubleVector xSequence, DoubleVector ySequence)

        Parameters
        ----------
        xyStageLabel: char const *
        xSequence: std::vector< double,std::allocator< double > >
        ySequence: std::vector< double,std::allocator< double > >

        """
        return _MMCorePy.CMMCore_loadXYStageSequence(self, xyStageLabel, xSequence, ySequence)


    def setSerialProperties(self, portName, answerTimeout, baudRate, delayBetweenCharsMs, handshaking, parity, stopBits):
        """
        setSerialProperties(CMMCore self, char const * portName, char const * answerTimeout, char const * baudRate, char const * delayBetweenCharsMs, char const * handshaking, char const * parity, char const * stopBits)

        Parameters
        ----------
        portName: char const *
        answerTimeout: char const *
        baudRate: char const *
        delayBetweenCharsMs: char const *
        handshaking: char const *
        parity: char const *
        stopBits: char const *

        """
        return _MMCorePy.CMMCore_setSerialProperties(self, portName, answerTimeout, baudRate, delayBetweenCharsMs, handshaking, parity, stopBits)


    def setSerialPortCommand(self, portLabel, command, term):
        """
        setSerialPortCommand(CMMCore self, char const * portLabel, char const * command, char const * term)

        Parameters
        ----------
        portLabel: char const *
        command: char const *
        term: char const *

        """
        return _MMCorePy.CMMCore_setSerialPortCommand(self, portLabel, command, term)


    def getSerialPortAnswer(self, portLabel, term):
        """
        getSerialPortAnswer(CMMCore self, char const * portLabel, char const * term) -> std::string

        Parameters
        ----------
        portLabel: char const *
        term: char const *

        """
        return _MMCorePy.CMMCore_getSerialPortAnswer(self, portLabel, term)


    def writeToSerialPort(self, portLabel, data):
        """
        writeToSerialPort(CMMCore self, char const * portLabel, CharVector data)

        Parameters
        ----------
        portLabel: char const *
        data: std::vector< char,std::allocator< char > > const &

        """
        return _MMCorePy.CMMCore_writeToSerialPort(self, portLabel, data)


    def readFromSerialPort(self, portLabel):
        """
        readFromSerialPort(CMMCore self, char const * portLabel) -> CharVector

        Parameters
        ----------
        portLabel: char const *

        """
        return _MMCorePy.CMMCore_readFromSerialPort(self, portLabel)


    def setSLMPixelsTo(self, *args):
        """
        setSLMPixelsTo(CMMCore self, char const * slmLabel, unsigned char intensity)

        Parameters
        ----------
        slmLabel: char const *
        intensity: unsigned char

        setSLMPixelsTo(CMMCore self, char const * slmLabel, unsigned char red, unsigned char green, unsigned char blue)

        Parameters
        ----------
        slmLabel: char const *
        red: unsigned char
        green: unsigned char
        blue: unsigned char

        """
        return _MMCorePy.CMMCore_setSLMPixelsTo(self, *args)


    def displaySLMImage(self, slmLabel):
        """
        displaySLMImage(CMMCore self, char const * slmLabel)

        Parameters
        ----------
        slmLabel: char const *

        """
        return _MMCorePy.CMMCore_displaySLMImage(self, slmLabel)


    def setSLMExposure(self, slmLabel, exposure_ms):
        """
        setSLMExposure(CMMCore self, char const * slmLabel, double exposure_ms)

        Parameters
        ----------
        slmLabel: char const *
        exposure_ms: double

        """
        return _MMCorePy.CMMCore_setSLMExposure(self, slmLabel, exposure_ms)


    def getSLMExposure(self, slmLabel):
        """
        getSLMExposure(CMMCore self, char const * slmLabel) -> double

        Parameters
        ----------
        slmLabel: char const *

        """
        return _MMCorePy.CMMCore_getSLMExposure(self, slmLabel)


    def getSLMWidth(self, slmLabel):
        """
        getSLMWidth(CMMCore self, char const * slmLabel) -> unsigned int

        Parameters
        ----------
        slmLabel: char const *

        """
        return _MMCorePy.CMMCore_getSLMWidth(self, slmLabel)


    def getSLMHeight(self, slmLabel):
        """
        getSLMHeight(CMMCore self, char const * slmLabel) -> unsigned int

        Parameters
        ----------
        slmLabel: char const *

        """
        return _MMCorePy.CMMCore_getSLMHeight(self, slmLabel)


    def getSLMNumberOfComponents(self, slmLabel):
        """
        getSLMNumberOfComponents(CMMCore self, char const * slmLabel) -> unsigned int

        Parameters
        ----------
        slmLabel: char const *

        """
        return _MMCorePy.CMMCore_getSLMNumberOfComponents(self, slmLabel)


    def getSLMBytesPerPixel(self, slmLabel):
        """
        getSLMBytesPerPixel(CMMCore self, char const * slmLabel) -> unsigned int

        Parameters
        ----------
        slmLabel: char const *

        """
        return _MMCorePy.CMMCore_getSLMBytesPerPixel(self, slmLabel)


    def getSLMSequenceMaxLength(self, slmLabel):
        """
        getSLMSequenceMaxLength(CMMCore self, char const * slmLabel) -> long

        Parameters
        ----------
        slmLabel: char const *

        """
        return _MMCorePy.CMMCore_getSLMSequenceMaxLength(self, slmLabel)


    def startSLMSequence(self, slmLabel):
        """
        startSLMSequence(CMMCore self, char const * slmLabel)

        Parameters
        ----------
        slmLabel: char const *

        """
        return _MMCorePy.CMMCore_startSLMSequence(self, slmLabel)


    def stopSLMSequence(self, slmLabel):
        """
        stopSLMSequence(CMMCore self, char const * slmLabel)

        Parameters
        ----------
        slmLabel: char const *

        """
        return _MMCorePy.CMMCore_stopSLMSequence(self, slmLabel)


    def loadSLMSequence(self, slmLabel, imageSequence):
        """
        loadSLMSequence(CMMCore self, char const * slmLabel, std::vector< unsigned char *,std::allocator< unsigned char * > > imageSequence)

        Parameters
        ----------
        slmLabel: char const *
        imageSequence: std::vector< unsigned char *,std::allocator< unsigned char * > >

        """
        return _MMCorePy.CMMCore_loadSLMSequence(self, slmLabel, imageSequence)


    def pointGalvoAndFire(self, galvoLabel, x, y, pulseTime_us):
        """
        pointGalvoAndFire(CMMCore self, char const * galvoLabel, double x, double y, double pulseTime_us)

        Parameters
        ----------
        galvoLabel: char const *
        x: double
        y: double
        pulseTime_us: double

        """
        return _MMCorePy.CMMCore_pointGalvoAndFire(self, galvoLabel, x, y, pulseTime_us)


    def setGalvoSpotInterval(self, galvoLabel, pulseTime_us):
        """
        setGalvoSpotInterval(CMMCore self, char const * galvoLabel, double pulseTime_us)

        Parameters
        ----------
        galvoLabel: char const *
        pulseTime_us: double

        """
        return _MMCorePy.CMMCore_setGalvoSpotInterval(self, galvoLabel, pulseTime_us)


    def setGalvoPosition(self, galvoLabel, x, y):
        """
        setGalvoPosition(CMMCore self, char const * galvoLabel, double x, double y)

        Parameters
        ----------
        galvoLabel: char const *
        x: double
        y: double

        """
        return _MMCorePy.CMMCore_setGalvoPosition(self, galvoLabel, x, y)


    def getGalvoPosition(self, galvoLabel):
        """
        getGalvoPosition(CMMCore self, char const * galvoLabel)

        Parameters
        ----------
        galvoLabel: char const *

        """
        return _MMCorePy.CMMCore_getGalvoPosition(self, galvoLabel)


    def setGalvoIlluminationState(self, galvoLabel, on):
        """
        setGalvoIlluminationState(CMMCore self, char const * galvoLabel, bool on)

        Parameters
        ----------
        galvoLabel: char const *
        on: bool

        """
        return _MMCorePy.CMMCore_setGalvoIlluminationState(self, galvoLabel, on)


    def getGalvoXRange(self, galvoLabel):
        """
        getGalvoXRange(CMMCore self, char const * galvoLabel) -> double

        Parameters
        ----------
        galvoLabel: char const *

        """
        return _MMCorePy.CMMCore_getGalvoXRange(self, galvoLabel)


    def getGalvoXMinimum(self, galvoLabel):
        """
        getGalvoXMinimum(CMMCore self, char const * galvoLabel) -> double

        Parameters
        ----------
        galvoLabel: char const *

        """
        return _MMCorePy.CMMCore_getGalvoXMinimum(self, galvoLabel)


    def getGalvoYRange(self, galvoLabel):
        """
        getGalvoYRange(CMMCore self, char const * galvoLabel) -> double

        Parameters
        ----------
        galvoLabel: char const *

        """
        return _MMCorePy.CMMCore_getGalvoYRange(self, galvoLabel)


    def getGalvoYMinimum(self, galvoLabel):
        """
        getGalvoYMinimum(CMMCore self, char const * galvoLabel) -> double

        Parameters
        ----------
        galvoLabel: char const *

        """
        return _MMCorePy.CMMCore_getGalvoYMinimum(self, galvoLabel)


    def addGalvoPolygonVertex(self, galvoLabel, polygonIndex, x, y):
        """
        addGalvoPolygonVertex(CMMCore self, char const * galvoLabel, int polygonIndex, double x, double y)

        Parameters
        ----------
        galvoLabel: char const *
        polygonIndex: int
        x: double
        y: double

        """
        return _MMCorePy.CMMCore_addGalvoPolygonVertex(self, galvoLabel, polygonIndex, x, y)


    def deleteGalvoPolygons(self, galvoLabel):
        """
        deleteGalvoPolygons(CMMCore self, char const * galvoLabel)

        Parameters
        ----------
        galvoLabel: char const *

        """
        return _MMCorePy.CMMCore_deleteGalvoPolygons(self, galvoLabel)


    def loadGalvoPolygons(self, galvoLabel):
        """
        loadGalvoPolygons(CMMCore self, char const * galvoLabel)

        Parameters
        ----------
        galvoLabel: char const *

        """
        return _MMCorePy.CMMCore_loadGalvoPolygons(self, galvoLabel)


    def setGalvoPolygonRepetitions(self, galvoLabel, repetitions):
        """
        setGalvoPolygonRepetitions(CMMCore self, char const * galvoLabel, int repetitions)

        Parameters
        ----------
        galvoLabel: char const *
        repetitions: int

        """
        return _MMCorePy.CMMCore_setGalvoPolygonRepetitions(self, galvoLabel, repetitions)


    def runGalvoPolygons(self, galvoLabel):
        """
        runGalvoPolygons(CMMCore self, char const * galvoLabel)

        Parameters
        ----------
        galvoLabel: char const *

        """
        return _MMCorePy.CMMCore_runGalvoPolygons(self, galvoLabel)


    def runGalvoSequence(self, galvoLabel):
        """
        runGalvoSequence(CMMCore self, char const * galvoLabel)

        Parameters
        ----------
        galvoLabel: char const *

        """
        return _MMCorePy.CMMCore_runGalvoSequence(self, galvoLabel)


    def getGalvoChannel(self, galvoLabel):
        """
        getGalvoChannel(CMMCore self, char const * galvoLabel) -> std::string

        Parameters
        ----------
        galvoLabel: char const *

        """
        return _MMCorePy.CMMCore_getGalvoChannel(self, galvoLabel)


    def supportsDeviceDetection(self, deviceLabel):
        """
        supportsDeviceDetection(CMMCore self, char * deviceLabel) -> bool

        Parameters
        ----------
        deviceLabel: char *

        """
        return _MMCorePy.CMMCore_supportsDeviceDetection(self, deviceLabel)


    def detectDevice(self, deviceLabel):
        """
        detectDevice(CMMCore self, char * deviceLabel) -> MM::DeviceDetectionStatus

        Parameters
        ----------
        deviceLabel: char *

        """
        return _MMCorePy.CMMCore_detectDevice(self, deviceLabel)


    def getParentLabel(self, peripheralLabel):
        """
        getParentLabel(CMMCore self, char const * peripheralLabel) -> std::string

        Parameters
        ----------
        peripheralLabel: char const *

        """
        return _MMCorePy.CMMCore_getParentLabel(self, peripheralLabel)


    def setParentLabel(self, deviceLabel, parentHubLabel):
        """
        setParentLabel(CMMCore self, char const * deviceLabel, char const * parentHubLabel)

        Parameters
        ----------
        deviceLabel: char const *
        parentHubLabel: char const *

        """
        return _MMCorePy.CMMCore_setParentLabel(self, deviceLabel, parentHubLabel)


    def getInstalledDevices(self, hubLabel):
        """
        getInstalledDevices(CMMCore self, char const * hubLabel) -> StrVector

        Parameters
        ----------
        hubLabel: char const *

        """
        return _MMCorePy.CMMCore_getInstalledDevices(self, hubLabel)


    def getInstalledDeviceDescription(self, hubLabel, peripheralLabel):
        """
        getInstalledDeviceDescription(CMMCore self, char const * hubLabel, char const * peripheralLabel) -> std::string

        Parameters
        ----------
        hubLabel: char const *
        peripheralLabel: char const *

        """
        return _MMCorePy.CMMCore_getInstalledDeviceDescription(self, hubLabel, peripheralLabel)


    def getLoadedPeripheralDevices(self, hubLabel):
        """
        getLoadedPeripheralDevices(CMMCore self, char const * hubLabel) -> StrVector

        Parameters
        ----------
        hubLabel: char const *

        """
        return _MMCorePy.CMMCore_getLoadedPeripheralDevices(self, hubLabel)


    def getUserId(self):
        """
        getUserId(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore const *

        """
        return _MMCorePy.CMMCore_getUserId(self)


    def getHostName(self):
        """
        getHostName(CMMCore self) -> std::string

        Parameters
        ----------
        self: CMMCore const *

        """
        return _MMCorePy.CMMCore_getHostName(self)


    def getMACAddresses(self):
        """
        getMACAddresses(CMMCore self) -> StrVector

        Parameters
        ----------
        self: CMMCore *

        """
        return _MMCorePy.CMMCore_getMACAddresses(self)


    def setSLMImage(self, slmLabel, pixels):
        """
        setSLMImage(CMMCore self, char const * slmLabel, char * pixels) -> PyObject *

        Parameters
        ----------
        slmLabel: char const *
        pixels: char *

        """
        return _MMCorePy.CMMCore_setSLMImage(self, slmLabel, pixels)

CMMCore_swigregister = _MMCorePy.CMMCore_swigregister
CMMCore_swigregister(CMMCore)

def CMMCore_noop():
    """CMMCore_noop()"""
    return _MMCorePy.CMMCore_noop()

def CMMCore_addSearchPath(path):
    """
    CMMCore_addSearchPath(char const * path)

    Parameters
    ----------
    path: char const *

    """
    return _MMCorePy.CMMCore_addSearchPath(path)

def CMMCore_getDeviceLibraries():
    """CMMCore_getDeviceLibraries() -> StrVector"""
    return _MMCorePy.CMMCore_getDeviceLibraries()

class MetadataError(_object):
    """Proxy of C++ MetadataError class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataError, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataError, name)
    __repr__ = _swig_repr

    def __init__(self, msg):
        """
        __init__(MetadataError self, char const * msg) -> MetadataError

        Parameters
        ----------
        msg: char const *

        """
        this = _MMCorePy.new_MetadataError(msg)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataError
    __del__ = lambda self: None

    def getMsg(self):
        """
        getMsg(MetadataError self) -> std::string

        Parameters
        ----------
        self: MetadataError *

        """
        return _MMCorePy.MetadataError_getMsg(self)

MetadataError_swigregister = _MMCorePy.MetadataError_swigregister
MetadataError_swigregister(MetadataError)

class MetadataKeyError(MetadataError):
    """Proxy of C++ MetadataKeyError class."""

    __swig_setmethods__ = {}
    for _s in [MetadataError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataKeyError, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataKeyError, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(MetadataKeyError self) -> MetadataKeyError"""
        this = _MMCorePy.new_MetadataKeyError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataKeyError
    __del__ = lambda self: None

    def __getitem__(self, n):
        """
        __getitem__(MetadataKeyError self, int n) -> std::string

        Parameters
        ----------
        n: int

        """
        return _MMCorePy.MetadataKeyError___getitem__(self, n)


    def __str__(self):
        """
        __str__(MetadataKeyError self) -> std::string

        Parameters
        ----------
        self: MetadataKeyError *

        """
        return _MMCorePy.MetadataKeyError___str__(self)

MetadataKeyError_swigregister = _MMCorePy.MetadataKeyError_swigregister
MetadataKeyError_swigregister(MetadataKeyError)

class MetadataIndexError(MetadataError):
    """Proxy of C++ MetadataIndexError class."""

    __swig_setmethods__ = {}
    for _s in [MetadataError]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataIndexError, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataError]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataIndexError, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(MetadataIndexError self) -> MetadataIndexError"""
        this = _MMCorePy.new_MetadataIndexError()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataIndexError
    __del__ = lambda self: None

    def __getitem__(self, n):
        """
        __getitem__(MetadataIndexError self, int n) -> std::string

        Parameters
        ----------
        n: int

        """
        return _MMCorePy.MetadataIndexError___getitem__(self, n)


    def __str__(self):
        """
        __str__(MetadataIndexError self) -> std::string

        Parameters
        ----------
        self: MetadataIndexError *

        """
        return _MMCorePy.MetadataIndexError___str__(self)

MetadataIndexError_swigregister = _MMCorePy.MetadataIndexError_swigregister
MetadataIndexError_swigregister(MetadataIndexError)

class MetadataTag(_object):
    """Proxy of C++ MetadataTag class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataTag, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataTag, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _MMCorePy.delete_MetadataTag
    __del__ = lambda self: None

    def GetDevice(self):
        """
        GetDevice(MetadataTag self) -> std::string const &

        Parameters
        ----------
        self: MetadataTag const *

        """
        return _MMCorePy.MetadataTag_GetDevice(self)


    def GetName(self):
        """
        GetName(MetadataTag self) -> std::string const &

        Parameters
        ----------
        self: MetadataTag const *

        """
        return _MMCorePy.MetadataTag_GetName(self)


    def GetQualifiedName(self):
        """
        GetQualifiedName(MetadataTag self) -> std::string const

        Parameters
        ----------
        self: MetadataTag const *

        """
        return _MMCorePy.MetadataTag_GetQualifiedName(self)


    def IsReadOnly(self):
        """
        IsReadOnly(MetadataTag self) -> bool const

        Parameters
        ----------
        self: MetadataTag const *

        """
        return _MMCorePy.MetadataTag_IsReadOnly(self)


    def SetDevice(self, device):
        """
        SetDevice(MetadataTag self, char const * device)

        Parameters
        ----------
        device: char const *

        """
        return _MMCorePy.MetadataTag_SetDevice(self, device)


    def SetName(self, name):
        """
        SetName(MetadataTag self, char const * name)

        Parameters
        ----------
        name: char const *

        """
        return _MMCorePy.MetadataTag_SetName(self, name)


    def SetReadOnly(self, ro):
        """
        SetReadOnly(MetadataTag self, bool ro)

        Parameters
        ----------
        ro: bool

        """
        return _MMCorePy.MetadataTag_SetReadOnly(self, ro)


    def ToSingleTag(self):
        """
        ToSingleTag(MetadataTag self) -> MetadataSingleTag

        Parameters
        ----------
        self: MetadataTag const *

        """
        return _MMCorePy.MetadataTag_ToSingleTag(self)


    def ToArrayTag(self):
        """
        ToArrayTag(MetadataTag self) -> MetadataArrayTag

        Parameters
        ----------
        self: MetadataTag const *

        """
        return _MMCorePy.MetadataTag_ToArrayTag(self)


    def Clone(self):
        """
        Clone(MetadataTag self) -> MetadataTag

        Parameters
        ----------
        self: MetadataTag *

        """
        return _MMCorePy.MetadataTag_Clone(self)


    def Serialize(self):
        """
        Serialize(MetadataTag self) -> std::string

        Parameters
        ----------
        self: MetadataTag *

        """
        return _MMCorePy.MetadataTag_Serialize(self)


    def Restore(self, stream):
        """
        Restore(MetadataTag self, char const * stream) -> bool

        Parameters
        ----------
        stream: char const *

        """
        return _MMCorePy.MetadataTag_Restore(self, stream)

MetadataTag_swigregister = _MMCorePy.MetadataTag_swigregister
MetadataTag_swigregister(MetadataTag)

class MetadataSingleTag(MetadataTag):
    """Proxy of C++ MetadataSingleTag class."""

    __swig_setmethods__ = {}
    for _s in [MetadataTag]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataSingleTag, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataTag]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataSingleTag, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(MetadataSingleTag self) -> MetadataSingleTag
        __init__(MetadataSingleTag self, char const * name, char const * device, bool readOnly) -> MetadataSingleTag

        Parameters
        ----------
        name: char const *
        device: char const *
        readOnly: bool

        """
        this = _MMCorePy.new_MetadataSingleTag(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataSingleTag
    __del__ = lambda self: None

    def GetValue(self):
        """
        GetValue(MetadataSingleTag self) -> std::string const &

        Parameters
        ----------
        self: MetadataSingleTag const *

        """
        return _MMCorePy.MetadataSingleTag_GetValue(self)


    def SetValue(self, val):
        """
        SetValue(MetadataSingleTag self, char const * val)

        Parameters
        ----------
        val: char const *

        """
        return _MMCorePy.MetadataSingleTag_SetValue(self, val)


    def ToSingleTag(self):
        """
        ToSingleTag(MetadataSingleTag self) -> MetadataSingleTag

        Parameters
        ----------
        self: MetadataSingleTag const *

        """
        return _MMCorePy.MetadataSingleTag_ToSingleTag(self)


    def Clone(self):
        """
        Clone(MetadataSingleTag self) -> MetadataTag

        Parameters
        ----------
        self: MetadataSingleTag *

        """
        return _MMCorePy.MetadataSingleTag_Clone(self)


    def Serialize(self):
        """
        Serialize(MetadataSingleTag self) -> std::string

        Parameters
        ----------
        self: MetadataSingleTag *

        """
        return _MMCorePy.MetadataSingleTag_Serialize(self)


    def Restore(self, stream):
        """
        Restore(MetadataSingleTag self, char const * stream) -> bool

        Parameters
        ----------
        stream: char const *

        """
        return _MMCorePy.MetadataSingleTag_Restore(self, stream)

MetadataSingleTag_swigregister = _MMCorePy.MetadataSingleTag_swigregister
MetadataSingleTag_swigregister(MetadataSingleTag)

class MetadataArrayTag(MetadataTag):
    """Proxy of C++ MetadataArrayTag class."""

    __swig_setmethods__ = {}
    for _s in [MetadataTag]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MetadataArrayTag, name, value)
    __swig_getmethods__ = {}
    for _s in [MetadataTag]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MetadataArrayTag, name)
    __repr__ = _swig_repr

    def __init__(self):
        """__init__(MetadataArrayTag self) -> MetadataArrayTag"""
        this = _MMCorePy.new_MetadataArrayTag()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MMCorePy.delete_MetadataArrayTag
    __del__ = lambda self: None

    def ToArrayTag(self):
        """
        ToArrayTag(MetadataArrayTag self) -> MetadataArrayTag

        Parameters
        ----------
        self: MetadataArrayTag const *

        """
        return _MMCorePy.MetadataArrayTag_ToArrayTag(self)


    def AddValue(self, val):
        """
        AddValue(MetadataArrayTag self, char const * val)

        Parameters
        ----------
        val: char const *

        """
        return _MMCorePy.MetadataArrayTag_AddValue(self, val)


    def SetValue(self, val, idx):
        """
        SetValue(MetadataArrayTag self, char const * val, size_t idx)

        Parameters
        ----------
        val: char const *
        idx: size_t

        """
        return _MMCorePy.MetadataArrayTag_SetValue(self, val, idx)


    def GetValue(self, idx):
        """
        GetValue(MetadataArrayTag self, size_t idx) -> std::string const &

        Parameters
        ----------
        idx: size_t

        """
        return _MMCorePy.MetadataArrayTag_GetValue(self, idx)


    def GetSize(self):
        """
        GetSize(MetadataArrayTag self) -> size_t

        Parameters
        ----------
        self: MetadataArrayTag const *

        """
        return _MMCorePy.MetadataArrayTag_GetSize(self)


    def Clone(self):
        """
        Clone(MetadataArrayTag self) -> MetadataTag

        Parameters
        ----------
        self: MetadataArrayTag *

        """
        return _MMCorePy.MetadataArrayTag_Clone(self)


    def Serialize(self):
        """
        Serialize(MetadataArrayTag self) -> std::string

        Parameters
        ----------
        self: MetadataArrayTag *

        """
        return _MMCorePy.MetadataArrayTag_Serialize(self)


    def Restore(self, stream):
        """
        Restore(MetadataArrayTag self, char const * stream) -> bool

        Parameters
        ----------
        stream: char const *

        """
        return _MMCorePy.MetadataArrayTag_Restore(self, stream)

MetadataArrayTag_swigregister = _MMCorePy.MetadataArrayTag_swigregister
MetadataArrayTag_swigregister(MetadataArrayTag)

class Metadata(_object):
    """Proxy of C++ Metadata class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Metadata, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Metadata, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _MMCorePy.delete_Metadata
    __del__ = lambda self: None

    def __init__(self, *args):
        """
        __init__(Metadata self) -> Metadata
        __init__(Metadata self, Metadata original) -> Metadata

        Parameters
        ----------
        original: Metadata const &

        """
        this = _MMCorePy.new_Metadata(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this

    def Clear(self):
        """
        Clear(Metadata self)

        Parameters
        ----------
        self: Metadata *

        """
        return _MMCorePy.Metadata_Clear(self)


    def GetKeys(self):
        """
        GetKeys(Metadata self) -> StrVector

        Parameters
        ----------
        self: Metadata const *

        """
        return _MMCorePy.Metadata_GetKeys(self)


    def HasTag(self, key):
        """
        HasTag(Metadata self, char const * key) -> bool

        Parameters
        ----------
        key: char const *

        """
        return _MMCorePy.Metadata_HasTag(self, key)


    def GetSingleTag(self, key):
        """
        GetSingleTag(Metadata self, char const * key) -> MetadataSingleTag

        Parameters
        ----------
        key: char const *

        """
        return _MMCorePy.Metadata_GetSingleTag(self, key)


    def GetArrayTag(self, key):
        """
        GetArrayTag(Metadata self, char const * key) -> MetadataArrayTag

        Parameters
        ----------
        key: char const *

        """
        return _MMCorePy.Metadata_GetArrayTag(self, key)


    def SetTag(self, tag):
        """
        SetTag(Metadata self, MetadataTag tag)

        Parameters
        ----------
        tag: MetadataTag &

        """
        return _MMCorePy.Metadata_SetTag(self, tag)


    def RemoveTag(self, key):
        """
        RemoveTag(Metadata self, char const * key)

        Parameters
        ----------
        key: char const *

        """
        return _MMCorePy.Metadata_RemoveTag(self, key)


    def Merge(self, newTags):
        """
        Merge(Metadata self, Metadata newTags)

        Parameters
        ----------
        newTags: Metadata const &

        """
        return _MMCorePy.Metadata_Merge(self, newTags)


    def Serialize(self):
        """
        Serialize(Metadata self) -> std::string

        Parameters
        ----------
        self: Metadata const *

        """
        return _MMCorePy.Metadata_Serialize(self)


    def readLine(self, iss):
        """
        readLine(Metadata self, std::istringstream & iss) -> std::string

        Parameters
        ----------
        iss: std::istringstream &

        """
        return _MMCorePy.Metadata_readLine(self, iss)


    def Restore(self, stream):
        """
        Restore(Metadata self, char const * stream) -> bool

        Parameters
        ----------
        stream: char const *

        """
        return _MMCorePy.Metadata_Restore(self, stream)


    def Dump(self):
        """
        Dump(Metadata self) -> std::string

        Parameters
        ----------
        self: Metadata *

        """
        return _MMCorePy.Metadata_Dump(self)

Metadata_swigregister = _MMCorePy.Metadata_swigregister
Metadata_swigregister(Metadata)

class MMEventCallback(_object):
    """Proxy of C++ MMEventCallback class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MMEventCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MMEventCallback, name)
    __repr__ = _swig_repr

    def __init__(self):
        """
        __init__(MMEventCallback self) -> MMEventCallback

        Parameters
        ----------
        self: PyObject *

        """
        if self.__class__ == MMEventCallback:
            _self = None
        else:
            _self = self
        this = _MMCorePy.new_MMEventCallback(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _MMCorePy.delete_MMEventCallback
    __del__ = lambda self: None

    def onPropertiesChanged(self):
        """
        onPropertiesChanged(MMEventCallback self)

        Parameters
        ----------
        self: MMEventCallback *

        """
        return _MMCorePy.MMEventCallback_onPropertiesChanged(self)


    def onPropertyChanged(self, name, propName, propValue):
        """
        onPropertyChanged(MMEventCallback self, char const * name, char const * propName, char const * propValue)

        Parameters
        ----------
        name: char const *
        propName: char const *
        propValue: char const *

        """
        return _MMCorePy.MMEventCallback_onPropertyChanged(self, name, propName, propValue)


    def onConfigGroupChanged(self, groupName, newConfigName):
        """
        onConfigGroupChanged(MMEventCallback self, char const * groupName, char const * newConfigName)

        Parameters
        ----------
        groupName: char const *
        newConfigName: char const *

        """
        return _MMCorePy.MMEventCallback_onConfigGroupChanged(self, groupName, newConfigName)


    def onSystemConfigurationLoaded(self):
        """
        onSystemConfigurationLoaded(MMEventCallback self)

        Parameters
        ----------
        self: MMEventCallback *

        """
        return _MMCorePy.MMEventCallback_onSystemConfigurationLoaded(self)


    def onPixelSizeChanged(self, newPixelSizeUm):
        """
        onPixelSizeChanged(MMEventCallback self, double newPixelSizeUm)

        Parameters
        ----------
        newPixelSizeUm: double

        """
        return _MMCorePy.MMEventCallback_onPixelSizeChanged(self, newPixelSizeUm)


    def onPixelSizeAffineChanged(self, v0, v1, v2, v3, v4, v5):
        """
        onPixelSizeAffineChanged(MMEventCallback self, double v0, double v1, double v2, double v3, double v4, double v5)

        Parameters
        ----------
        v0: double
        v1: double
        v2: double
        v3: double
        v4: double
        v5: double

        """
        return _MMCorePy.MMEventCallback_onPixelSizeAffineChanged(self, v0, v1, v2, v3, v4, v5)


    def onStagePositionChanged(self, name, pos):
        """
        onStagePositionChanged(MMEventCallback self, char * name, double pos)

        Parameters
        ----------
        name: char *
        pos: double

        """
        return _MMCorePy.MMEventCallback_onStagePositionChanged(self, name, pos)


    def onXYStagePositionChanged(self, name, xpos, ypos):
        """
        onXYStagePositionChanged(MMEventCallback self, char * name, double xpos, double ypos)

        Parameters
        ----------
        name: char *
        xpos: double
        ypos: double

        """
        return _MMCorePy.MMEventCallback_onXYStagePositionChanged(self, name, xpos, ypos)


    def onExposureChanged(self, name, newExposure):
        """
        onExposureChanged(MMEventCallback self, char * name, double newExposure)

        Parameters
        ----------
        name: char *
        newExposure: double

        """
        return _MMCorePy.MMEventCallback_onExposureChanged(self, name, newExposure)


    def onSLMExposureChanged(self, name, newExposure):
        """
        onSLMExposureChanged(MMEventCallback self, char * name, double newExposure)

        Parameters
        ----------
        name: char *
        newExposure: double

        """
        return _MMCorePy.MMEventCallback_onSLMExposureChanged(self, name, newExposure)

    def __disown__(self):
        self.this.disown()
        _MMCorePy.disown_MMEventCallback(self)
        return weakref_proxy(self)
MMEventCallback_swigregister = _MMCorePy.MMEventCallback_swigregister
MMEventCallback_swigregister(MMEventCallback)

# This file is compatible with both classic and new-style classes.


